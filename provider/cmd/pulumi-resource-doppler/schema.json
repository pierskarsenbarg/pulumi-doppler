{
    "name": "doppler",
    "displayName": "Doppler",
    "description": "A Pulumi package for creating and managing doppler cloud resources.",
    "keywords": [
        "pulumi",
        "doppler",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`doppler` Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler).",
    "repository": "https://github.com/pulumiverse/pulumi-doppler",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-doppler/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-doppler/sdk/go/doppler",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/doppler",
            "packageDescription": "A Pulumi package for creating and managing doppler cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-doppler` repo](https://github.com/pulumiverse/pulumi-doppler/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-doppler` repo](https://github.com/DopplerHQ/terraform-provider-doppler/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_doppler",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-doppler` repo](https://github.com/pulumiverse/pulumi-doppler/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-doppler` repo](https://github.com/DopplerHQ/terraform-provider-doppler/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "defaults": [
            "dopplerToken"
        ]
    },
    "provider": {
        "description": "The provider type for the doppler package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "required": [
            "dopplerToken"
        ],
        "inputProperties": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "requiredInputs": [
            "dopplerToken"
        ]
    },
    "resources": {
        "doppler:index/branchConfig:BranchConfig": {
            "description": "Manage a Doppler config.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCiGithub = new doppler.BranchConfig(\"backendCiGithub\", {\n    environment: \"ci\",\n    name: \"ci_github\",\n    project: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci_github = doppler.BranchConfig(\"backendCiGithub\",\n    environment=\"ci\",\n    name=\"ci_github\",\n    project=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCiGithub = new Doppler.BranchConfig(\"backendCiGithub\", new()\n    {\n        Environment = \"ci\",\n        Name = \"ci_github\",\n        Project = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewBranchConfig(ctx, \"backendCiGithub\", \u0026doppler.BranchConfigArgs{\n\t\t\tEnvironment: pulumi.String(\"ci\"),\n\t\t\tName:        pulumi.String(\"ci_github\"),\n\t\t\tProject:     pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.BranchConfig;\nimport com.pulumi.doppler.BranchConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCiGithub = new BranchConfig(\"backendCiGithub\", BranchConfigArgs.builder()        \n            .environment(\"ci\")\n            .name(\"ci_github\")\n            .project(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCiGithub:\n    type: doppler:BranchConfig\n    properties:\n      environment: ci\n      name: ci_github\n      project: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The name of the Doppler environment where the config is located\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the config is located\n"
                }
            },
            "required": [
                "environment",
                "name",
                "project"
            ],
            "inputProperties": {
                "environment": {
                    "type": "string",
                    "description": "The name of the Doppler environment where the config is located\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the config is located\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "name",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchConfig resources.\n",
                "properties": {
                    "environment": {
                        "type": "string",
                        "description": "The name of the Doppler environment where the config is located\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler config\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the config is located\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "doppler:index/config:Config"
                }
            ]
        },
        "doppler:index/environment:Environment": {
            "description": "Manage a Doppler environment.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCi = new doppler.Environment(\"backendCi\", {\n    name: \"Continuous Integration\",\n    project: \"backend\",\n    slug: \"ci\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci = doppler.Environment(\"backendCi\",\n    name=\"Continuous Integration\",\n    project=\"backend\",\n    slug=\"ci\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCi = new Doppler.Environment(\"backendCi\", new()\n    {\n        Name = \"Continuous Integration\",\n        Project = \"backend\",\n        Slug = \"ci\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewEnvironment(ctx, \"backendCi\", \u0026doppler.EnvironmentArgs{\n\t\t\tName:    pulumi.String(\"Continuous Integration\"),\n\t\t\tProject: pulumi.String(\"backend\"),\n\t\t\tSlug:    pulumi.String(\"ci\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.Environment;\nimport com.pulumi.doppler.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCi = new Environment(\"backendCi\", EnvironmentArgs.builder()        \n            .name(\"Continuous Integration\")\n            .project(\"backend\")\n            .slug(\"ci\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCi:\n    type: doppler:Environment\n    properties:\n      name: Continuous Integration\n      project: backend\n      slug: ci\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler environment\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the environment is located\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Doppler environment\n"
                }
            },
            "required": [
                "name",
                "project",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler environment\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the environment is located\n",
                    "willReplaceOnChanges": true
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Doppler environment\n"
                }
            },
            "requiredInputs": [
                "name",
                "project",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler environment\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the environment is located\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the Doppler environment\n"
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/project:Project": {
            "description": "Manage a Doppler project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backend = new doppler.Project(\"backend\", {\n    description: \"The main backend project\",\n    name: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend = doppler.Project(\"backend\",\n    description=\"The main backend project\",\n    name=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend = new Doppler.Project(\"backend\", new()\n    {\n        Description = \"The main backend project\",\n        Name = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewProject(ctx, \"backend\", \u0026doppler.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"The main backend project\"),\n\t\t\tName:        pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.Project;\nimport com.pulumi.doppler.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend = new Project(\"backend\", ProjectArgs.builder()        \n            .description(\"The main backend project\")\n            .name(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend:\n    type: doppler:Project\n    properties:\n      description: The main backend project\n      name: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Doppler project\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Doppler project\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Doppler project\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler project\n"
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/secret:Secret": {
            "description": "Manage a single Doppler secret in a config.\n\n",
            "properties": {
                "computed": {
                    "type": "string",
                    "description": "The computed secret value, after resolving secret references\n",
                    "secret": true
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler secret\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "value": {
                    "type": "string",
                    "description": "The raw secret value\n",
                    "secret": true
                }
            },
            "required": [
                "computed",
                "config",
                "name",
                "project",
                "value"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler secret\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "value": {
                    "type": "string",
                    "description": "The raw secret value\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "config",
                "name",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "computed": {
                        "type": "string",
                        "description": "The computed secret value, after resolving secret references\n",
                        "secret": true
                    },
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler secret\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The raw secret value\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/serviceToken:ServiceToken": {
            "description": "Manage a Doppler service token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCiToken = new doppler.ServiceToken(\"backendCiToken\", {\n    access: \"read\",\n    config: \"ci\",\n    name: \"Builder Token\",\n    project: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci_token = doppler.ServiceToken(\"backendCiToken\",\n    access=\"read\",\n    config=\"ci\",\n    name=\"Builder Token\",\n    project=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCiToken = new Doppler.ServiceToken(\"backendCiToken\", new()\n    {\n        Access = \"read\",\n        Config = \"ci\",\n        Name = \"Builder Token\",\n        Project = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewServiceToken(ctx, \"backendCiToken\", \u0026doppler.ServiceTokenArgs{\n\t\t\tAccess:  pulumi.String(\"read\"),\n\t\t\tConfig:  pulumi.String(\"ci\"),\n\t\t\tName:    pulumi.String(\"Builder Token\"),\n\t\t\tProject: pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.ServiceToken;\nimport com.pulumi.doppler.ServiceTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCiToken = new ServiceToken(\"backendCiToken\", ServiceTokenArgs.builder()        \n            .access(\"read\")\n            .config(\"ci\")\n            .name(\"Builder Token\")\n            .project(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCiToken:\n    type: doppler:ServiceToken\n    properties:\n      access: read\n      config: ci\n      name: Builder Token\n      project: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "access": {
                    "type": "string",
                    "description": "The access level (read or read/write)\n"
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config where the service token is located\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key for the Doppler service token\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler service token\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the service token is located\n"
                }
            },
            "required": [
                "config",
                "key",
                "name",
                "project"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "The access level (read or read/write)\n",
                    "willReplaceOnChanges": true
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config where the service token is located\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler service token\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the service token is located\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "name",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceToken resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "The access level (read or read/write)\n",
                        "willReplaceOnChanges": true
                    },
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config where the service token is located\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The key for the Doppler service token\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler service token\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the service token is located\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "doppler:index/secrets:Secrets": {
            "description": "Retrieve all secrets in the config.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking Secrets.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config (required for personal tokens)\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project (required for personal tokens)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Secrets.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config (required for personal tokens)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "map": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of secret names to computed secret values\n",
                        "secret": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project (required for personal tokens)\n"
                    }
                },
                "type": "object",
                "required": [
                    "map",
                    "id"
                ]
            }
        }
    }
}