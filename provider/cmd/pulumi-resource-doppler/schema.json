{
    "name": "doppler",
    "displayName": "Doppler",
    "description": "A Pulumi package for creating and managing doppler cloud resources.",
    "keywords": [
        "pulumi",
        "doppler",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`doppler` Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler).",
    "repository": "https://github.com/pulumiverse/pulumi-doppler",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-doppler/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-doppler/sdk/go/doppler",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/doppler",
            "packageDescription": "A Pulumi package for creating and managing doppler cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-doppler` repo](https://github.com/pulumiverse/pulumi-doppler/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-doppler` repo](https://github.com/DopplerHQ/terraform-provider-doppler/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_doppler",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DopplerHQ/terraform-provider-doppler)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-doppler` repo](https://github.com/pulumiverse/pulumi-doppler/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-doppler` repo](https://github.com/DopplerHQ/terraform-provider-doppler/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "defaults": [
            "dopplerToken"
        ]
    },
    "provider": {
        "description": "The provider type for the doppler package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "required": [
            "dopplerToken"
        ],
        "inputProperties": {
            "dopplerToken": {
                "type": "string",
                "description": "A Doppler token, either a personal or service token\n"
            },
            "host": {
                "type": "string",
                "description": "The Doppler API host (i.e. https://api.doppler.com)\n"
            },
            "verifyTls": {
                "type": "boolean",
                "description": "Whether or not to verify TLS\n"
            }
        },
        "requiredInputs": [
            "dopplerToken"
        ]
    },
    "resources": {
        "doppler:index/branchConfig:BranchConfig": {
            "description": "Manage a Doppler config.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCiGithub = new doppler.BranchConfig(\"backendCiGithub\", {\n    environment: \"ci\",\n    project: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci_github = doppler.BranchConfig(\"backendCiGithub\",\n    environment=\"ci\",\n    project=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCiGithub = new Doppler.BranchConfig(\"backendCiGithub\", new()\n    {\n        Environment = \"ci\",\n        Project = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewBranchConfig(ctx, \"backendCiGithub\", \u0026doppler.BranchConfigArgs{\n\t\t\tEnvironment: pulumi.String(\"ci\"),\n\t\t\tProject:     pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.BranchConfig;\nimport com.pulumi.doppler.BranchConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCiGithub = new BranchConfig(\"backendCiGithub\", BranchConfigArgs.builder()        \n            .environment(\"ci\")\n            .project(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCiGithub:\n    type: doppler:BranchConfig\n    properties:\n      environment: ci\n      project: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The name of the Doppler environment where the config is located\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the config is located\n"
                }
            },
            "required": [
                "environment",
                "name",
                "project"
            ],
            "inputProperties": {
                "environment": {
                    "type": "string",
                    "description": "The name of the Doppler environment where the config is located\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the config is located\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchConfig resources.\n",
                "properties": {
                    "environment": {
                        "type": "string",
                        "description": "The name of the Doppler environment where the config is located\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler config\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the config is located\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "doppler:index/config:Config"
                }
            ]
        },
        "doppler:index/environment:Environment": {
            "description": "Manage a Doppler environment.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCi = new doppler.Environment(\"backendCi\", {\n    name: \"Continuous Integration\",\n    project: \"backend\",\n    slug: \"ci\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci = doppler.Environment(\"backendCi\",\n    name=\"Continuous Integration\",\n    project=\"backend\",\n    slug=\"ci\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCi = new Doppler.Environment(\"backendCi\", new()\n    {\n        Name = \"Continuous Integration\",\n        Project = \"backend\",\n        Slug = \"ci\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewEnvironment(ctx, \"backendCi\", \u0026doppler.EnvironmentArgs{\n\t\t\tName:    pulumi.String(\"Continuous Integration\"),\n\t\t\tProject: pulumi.String(\"backend\"),\n\t\t\tSlug:    pulumi.String(\"ci\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.Environment;\nimport com.pulumi.doppler.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCi = new Environment(\"backendCi\", EnvironmentArgs.builder()        \n            .name(\"Continuous Integration\")\n            .project(\"backend\")\n            .slug(\"ci\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCi:\n    type: doppler:Environment\n    properties:\n      name: Continuous Integration\n      project: backend\n      slug: ci\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler environment\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the environment is located\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Doppler environment\n"
                }
            },
            "required": [
                "name",
                "project",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler environment\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the environment is located\n",
                    "willReplaceOnChanges": true
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Doppler environment\n"
                }
            },
            "requiredInputs": [
                "name",
                "project",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler environment\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the environment is located\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the Doppler environment\n"
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/project:Project": {
            "description": "Manage a Doppler project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backend = new doppler.Project(\"backend\", {\n    description: \"The main backend project\",\n    name: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend = doppler.Project(\"backend\",\n    description=\"The main backend project\",\n    name=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend = new Doppler.Project(\"backend\", new()\n    {\n        Description = \"The main backend project\",\n        Name = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewProject(ctx, \"backend\", \u0026doppler.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"The main backend project\"),\n\t\t\tName:        pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.Project;\nimport com.pulumi.doppler.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend = new Project(\"backend\", ProjectArgs.builder()        \n            .description(\"The main backend project\")\n            .name(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend:\n    type: doppler:Project\n    properties:\n      description: The main backend project\n      name: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Doppler project\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Doppler project\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Doppler project\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler project\n"
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/secret:Secret": {
            "description": "Manage a single Doppler secret in a config.\n\n",
            "properties": {
                "computed": {
                    "type": "string",
                    "description": "The computed secret value, after resolving secret references\n",
                    "secret": true
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler secret\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "value": {
                    "type": "string",
                    "description": "The raw secret value\n",
                    "secret": true
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of the secret\n"
                }
            },
            "required": [
                "computed",
                "config",
                "name",
                "project",
                "value"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler secret\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "value": {
                    "type": "string",
                    "description": "The raw secret value\n",
                    "secret": true
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of the secret\n"
                }
            },
            "requiredInputs": [
                "config",
                "name",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "computed": {
                        "type": "string",
                        "description": "The computed secret value, after resolving secret references\n",
                        "secret": true
                    },
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler secret\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The raw secret value\n",
                        "secret": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the secret\n"
                    }
                },
                "type": "object"
            }
        },
        "doppler:index/serviceToken:ServiceToken": {
            "description": "Manage a Doppler service token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst backendCiToken = new doppler.ServiceToken(\"backendCiToken\", {\n    access: \"read\",\n    config: \"ci\",\n    name: \"Builder Token\",\n    project: \"backend\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_doppler as doppler\n\nbackend_ci_token = doppler.ServiceToken(\"backendCiToken\",\n    access=\"read\",\n    config=\"ci\",\n    name=\"Builder Token\",\n    project=\"backend\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backendCiToken = new Doppler.ServiceToken(\"backendCiToken\", new()\n    {\n        Access = \"read\",\n        Config = \"ci\",\n        Name = \"Builder Token\",\n        Project = \"backend\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := doppler.NewServiceToken(ctx, \"backendCiToken\", \u0026doppler.ServiceTokenArgs{\n\t\t\tAccess:  pulumi.String(\"read\"),\n\t\t\tConfig:  pulumi.String(\"ci\"),\n\t\t\tName:    pulumi.String(\"Builder Token\"),\n\t\t\tProject: pulumi.String(\"backend\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.doppler.ServiceToken;\nimport com.pulumi.doppler.ServiceTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backendCiToken = new ServiceToken(\"backendCiToken\", ServiceTokenArgs.builder()        \n            .access(\"read\")\n            .config(\"ci\")\n            .name(\"Builder Token\")\n            .project(\"backend\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backendCiToken:\n    type: doppler:ServiceToken\n    properties:\n      access: read\n      config: ci\n      name: Builder Token\n      project: backend\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "access": {
                    "type": "string",
                    "description": "The access level (read or read/write)\n"
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config where the service token is located\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key for the Doppler service token\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler service token\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the service token is located\n"
                }
            },
            "required": [
                "config",
                "key",
                "name",
                "project"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "The access level (read or read/write)\n",
                    "willReplaceOnChanges": true
                },
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config where the service token is located\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Doppler service token\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project where the service token is located\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "name",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceToken resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "The access level (read or read/write)\n",
                        "willReplaceOnChanges": true
                    },
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config where the service token is located\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The key for the Doppler service token\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Doppler service token\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project where the service token is located\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "doppler:integration/awsParameterStore:AwsParameterStore": {
            "description": "Manage an AWS Parameter Store Doppler integration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst dopplerParameterStore = new aws.iam.Role(\"dopplerParameterStore\", {\n    assumeRolePolicy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: \"sts:AssumeRole\",\n            Principal: {\n                AWS: \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            Condition: {\n                StringEquals: {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inlinePolicies: [{\n        policy: JSON.stringify({\n            Version: \"2012-10-17\",\n            Statement: [{\n                Action: [\n                    \"ssm:PutParameter\",\n                    \"ssm:LabelParameterVersion\",\n                    \"ssm:DeleteParameter\",\n                    \"ssm:RemoveTagsFromResource\",\n                    \"ssm:GetParameterHistory\",\n                    \"ssm:AddTagsToResource\",\n                    \"ssm:GetParametersByPath\",\n                    \"ssm:GetParameters\",\n                    \"ssm:GetParameter\",\n                    \"ssm:DeleteParameters\",\n                ],\n                Effect: \"Allow\",\n                Resource: \"*\",\n            }],\n        }),\n    }],\n});\nconst prod = new doppler.integration.AwsParameterStore(\"prod\", {\n    name: \"Production\",\n    assumeRoleArn: dopplerParameterStore.arn,\n});\nconst backendProd = new doppler.secretssync.AwsParameterStore(\"backendProd\", {\n    integration: prod.id,\n    project: \"backend\",\n    config: \"prd\",\n    region: \"us-east-1\",\n    path: \"/backend/\",\n    secureString: true,\n    tags: {\n        myTag: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_aws as aws\nimport pulumiverse_doppler as doppler\n\ndoppler_parameter_store = aws.iam.Role(\"dopplerParameterStore\",\n    assume_role_policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inline_policies=[aws.iam.RoleInlinePolicyArgs(\n        policy=json.dumps({\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{\n                \"Action\": [\n                    \"ssm:PutParameter\",\n                    \"ssm:LabelParameterVersion\",\n                    \"ssm:DeleteParameter\",\n                    \"ssm:RemoveTagsFromResource\",\n                    \"ssm:GetParameterHistory\",\n                    \"ssm:AddTagsToResource\",\n                    \"ssm:GetParametersByPath\",\n                    \"ssm:GetParameters\",\n                    \"ssm:GetParameter\",\n                    \"ssm:DeleteParameters\",\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\",\n            }],\n        }),\n    )])\nprod = doppler.integration.AwsParameterStore(\"prod\",\n    name=\"Production\",\n    assume_role_arn=doppler_parameter_store.arn)\nbackend_prod = doppler.secrets_sync.AwsParameterStore(\"backendProd\",\n    integration=prod.id,\n    project=\"backend\",\n    config=\"prd\",\n    region=\"us-east-1\",\n    path=\"/backend/\",\n    secure_string=True,\n    tags={\n        \"myTag\": \"enabled\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dopplerParameterStore = new Aws.Iam.Role(\"dopplerParameterStore\", new()\n    {\n        AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = \"sts:AssumeRole\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"AWS\"] = \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n                    },\n                    [\"Condition\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"StringEquals\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"sts:ExternalId\"] = \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                        },\n                    },\n                },\n            },\n        }),\n        InlinePolicies = new[]\n        {\n            new Aws.Iam.Inputs.RoleInlinePolicyArgs\n            {\n                Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Version\"] = \"2012-10-17\",\n                    [\"Statement\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"Action\"] = new[]\n                            {\n                                \"ssm:PutParameter\",\n                                \"ssm:LabelParameterVersion\",\n                                \"ssm:DeleteParameter\",\n                                \"ssm:RemoveTagsFromResource\",\n                                \"ssm:GetParameterHistory\",\n                                \"ssm:AddTagsToResource\",\n                                \"ssm:GetParametersByPath\",\n                                \"ssm:GetParameters\",\n                                \"ssm:GetParameter\",\n                                \"ssm:DeleteParameters\",\n                            },\n                            [\"Effect\"] = \"Allow\",\n                            [\"Resource\"] = \"*\",\n                        },\n                    },\n                }),\n            },\n        },\n    });\n\n    var prod = new Doppler.Integration.AwsParameterStore(\"prod\", new()\n    {\n        Name = \"Production\",\n        AssumeRoleArn = dopplerParameterStore.Arn,\n    });\n\n    var backendProd = new Doppler.SecretsSync.AwsParameterStore(\"backendProd\", new()\n    {\n        Integration = prod.Id,\n        Project = \"backend\",\n        Config = \"prd\",\n        Region = \"us-east-1\",\n        Path = \"/backend/\",\n        SecureString = true,\n        Tags = \n        {\n            { \"myTag\", \"enabled\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Action\": \"sts:AssumeRole\",\n\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Condition\": map[string]interface{}{\n\t\t\t\t\t\t\"StringEquals\": map[string]interface{}{\n\t\t\t\t\t\t\t\"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"ssm:PutParameter\",\n\t\t\t\t\t\t\"ssm:LabelParameterVersion\",\n\t\t\t\t\t\t\"ssm:DeleteParameter\",\n\t\t\t\t\t\t\"ssm:RemoveTagsFromResource\",\n\t\t\t\t\t\t\"ssm:GetParameterHistory\",\n\t\t\t\t\t\t\"ssm:AddTagsToResource\",\n\t\t\t\t\t\t\"ssm:GetParametersByPath\",\n\t\t\t\t\t\t\"ssm:GetParameters\",\n\t\t\t\t\t\t\"ssm:GetParameter\",\n\t\t\t\t\t\t\"ssm:DeleteParameters\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Effect\":   \"Allow\",\n\t\t\t\t\t\"Resource\": \"*\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tdopplerParameterStore, err := iam.NewRole(ctx, \"dopplerParameterStore\", \u0026iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.String(json0),\n\t\t\tInlinePolicies: iam.RoleInlinePolicyArray{\n\t\t\t\t\u0026iam.RoleInlinePolicyArgs{\n\t\t\t\t\tPolicy: pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprod, err := integration.NewAwsParameterStore(ctx, \"prod\", \u0026integration.AwsParameterStoreArgs{\n\t\t\tName:          pulumi.String(\"Production\"),\n\t\t\tAssumeRoleArn: dopplerParameterStore.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = secretsSync.NewAwsParameterStore(ctx, \"backendProd\", \u0026secretsSync.AwsParameterStoreArgs{\n\t\t\tIntegration:  prod.ID(),\n\t\t\tProject:      pulumi.String(\"backend\"),\n\t\t\tConfig:       pulumi.String(\"prd\"),\n\t\t\tRegion:       pulumi.String(\"us-east-1\"),\n\t\t\tPath:         pulumi.String(\"/backend/\"),\n\t\t\tSecureString: pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"myTag\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;\nimport com.pulumi.doppler.integration.AwsParameterStore;\nimport com.pulumi.doppler.integration.AwsParameterStoreArgs;\nimport com.pulumi.doppler.secretsSync.AwsParameterStore;\nimport com.pulumi.doppler.secretsSync.AwsParameterStoreArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dopplerParameterStore = new Role(\"dopplerParameterStore\", RoleArgs.builder()        \n            .assumeRolePolicy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Action\", \"sts:AssumeRole\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"AWS\", \"arn:aws:iam::299900769157:user/doppler-integration-operator\")\n                        )),\n                        jsonProperty(\"Condition\", jsonObject(\n                            jsonProperty(\"StringEquals\", jsonObject(\n                                jsonProperty(\"sts:ExternalId\", \"\u003cYOUR_WORKPLACE_SLUG\u003e\")\n                            ))\n                        ))\n                    )))\n                )))\n            .inlinePolicies(RoleInlinePolicyArgs.builder()\n                .policy(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2012-10-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Action\", jsonArray(\n                                \"ssm:PutParameter\", \n                                \"ssm:LabelParameterVersion\", \n                                \"ssm:DeleteParameter\", \n                                \"ssm:RemoveTagsFromResource\", \n                                \"ssm:GetParameterHistory\", \n                                \"ssm:AddTagsToResource\", \n                                \"ssm:GetParametersByPath\", \n                                \"ssm:GetParameters\", \n                                \"ssm:GetParameter\", \n                                \"ssm:DeleteParameters\"\n                            )),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Resource\", \"*\")\n                        )))\n                    )))\n                .build())\n            .build());\n\n        var prod = new AwsParameterStore(\"prod\", AwsParameterStoreArgs.builder()        \n            .name(\"Production\")\n            .assumeRoleArn(dopplerParameterStore.arn())\n            .build());\n\n        var backendProd = new AwsParameterStore(\"backendProd\", AwsParameterStoreArgs.builder()        \n            .integration(prod.id())\n            .project(\"backend\")\n            .config(\"prd\")\n            .region(\"us-east-1\")\n            .path(\"/backend/\")\n            .secureString(true)\n            .tags(Map.of(\"myTag\", \"enabled\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dopplerParameterStore:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Effect: Allow\n              Action: sts:AssumeRole\n              Principal:\n                AWS: arn:aws:iam::299900769157:user/doppler-integration-operator\n              Condition:\n                StringEquals:\n                  sts:ExternalId: \u003cYOUR_WORKPLACE_SLUG\u003e\n      inlinePolicies:\n        - policy:\n            fn::toJSON:\n              Version: 2012-10-17\n              Statement:\n                - Action:\n                    - ssm:PutParameter\n                    - ssm:LabelParameterVersion\n                    - ssm:DeleteParameter\n                    - ssm:RemoveTagsFromResource\n                    - ssm:GetParameterHistory\n                    - ssm:AddTagsToResource\n                    - ssm:GetParametersByPath\n                    - ssm:GetParameters\n                    - ssm:GetParameter\n                    - ssm:DeleteParameters\n                  Effect: Allow\n                  Resource: '*'\n  prod:\n    type: doppler:integration:AwsParameterStore\n    properties:\n      name: Production\n      assumeRoleArn: ${dopplerParameterStore.arn}\n  backendProd:\n    type: doppler:secretsSync:AwsParameterStore\n    properties:\n      integration: ${prod.id}\n      project: backend\n      config: prd\n      region: us-east-1\n      path: /backend/\n      secureString: true\n      tags:\n        myTag: enabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the AWS role for Doppler to assume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration\n"
                }
            },
            "required": [
                "assumeRoleArn",
                "name"
            ],
            "inputProperties": {
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the AWS role for Doppler to assume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "assumeRoleArn",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsParameterStore resources.\n",
                "properties": {
                    "assumeRoleArn": {
                        "type": "string",
                        "description": "The ARN of the AWS role for Doppler to assume\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "doppler:integration/awsSecretsManager:AwsSecretsManager": {
            "description": "Manage an AWS Secrets Manager Doppler integration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst dopplerSecretsManager = new aws.iam.Role(\"dopplerSecretsManager\", {\n    assumeRolePolicy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: \"sts:AssumeRole\",\n            Principal: {\n                AWS: \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            Condition: {\n                StringEquals: {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inlinePolicies: [{\n        policy: JSON.stringify({\n            Version: \"2012-10-17\",\n            Statement: [{\n                Action: [\n                    \"secretsmanager:GetSecretValue\",\n                    \"secretsmanager:DescribeSecret\",\n                    \"secretsmanager:PutSecretValue\",\n                    \"secretsmanager:CreateSecret\",\n                    \"secretsmanager:DeleteSecret\",\n                    \"secretsmanager:TagResource\",\n                    \"secretsmanager:UpdateSecret\",\n                ],\n                Effect: \"Allow\",\n                Resource: \"*\",\n            }],\n        }),\n    }],\n});\nconst prod = new doppler.integration.AwsSecretsManager(\"prod\", {\n    name: \"Production\",\n    assumeRoleArn: dopplerSecretsManager.arn,\n});\nconst backendProd = new doppler.secretssync.AwsSecretsManager(\"backendProd\", {\n    integration: prod.id,\n    project: \"backend\",\n    config: \"prd\",\n    region: \"us-east-1\",\n    path: \"/backend/\",\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_aws as aws\nimport pulumiverse_doppler as doppler\n\ndoppler_secrets_manager = aws.iam.Role(\"dopplerSecretsManager\",\n    assume_role_policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inline_policies=[aws.iam.RoleInlinePolicyArgs(\n        policy=json.dumps({\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{\n                \"Action\": [\n                    \"secretsmanager:GetSecretValue\",\n                    \"secretsmanager:DescribeSecret\",\n                    \"secretsmanager:PutSecretValue\",\n                    \"secretsmanager:CreateSecret\",\n                    \"secretsmanager:DeleteSecret\",\n                    \"secretsmanager:TagResource\",\n                    \"secretsmanager:UpdateSecret\",\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\",\n            }],\n        }),\n    )])\nprod = doppler.integration.AwsSecretsManager(\"prod\",\n    name=\"Production\",\n    assume_role_arn=doppler_secrets_manager.arn)\nbackend_prod = doppler.secrets_sync.AwsSecretsManager(\"backendProd\",\n    integration=prod.id,\n    project=\"backend\",\n    config=\"prd\",\n    region=\"us-east-1\",\n    path=\"/backend/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dopplerSecretsManager = new Aws.Iam.Role(\"dopplerSecretsManager\", new()\n    {\n        AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = \"sts:AssumeRole\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"AWS\"] = \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n                    },\n                    [\"Condition\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"StringEquals\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"sts:ExternalId\"] = \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                        },\n                    },\n                },\n            },\n        }),\n        InlinePolicies = new[]\n        {\n            new Aws.Iam.Inputs.RoleInlinePolicyArgs\n            {\n                Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Version\"] = \"2012-10-17\",\n                    [\"Statement\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"Action\"] = new[]\n                            {\n                                \"secretsmanager:GetSecretValue\",\n                                \"secretsmanager:DescribeSecret\",\n                                \"secretsmanager:PutSecretValue\",\n                                \"secretsmanager:CreateSecret\",\n                                \"secretsmanager:DeleteSecret\",\n                                \"secretsmanager:TagResource\",\n                                \"secretsmanager:UpdateSecret\",\n                            },\n                            [\"Effect\"] = \"Allow\",\n                            [\"Resource\"] = \"*\",\n                        },\n                    },\n                }),\n            },\n        },\n    });\n\n    var prod = new Doppler.Integration.AwsSecretsManager(\"prod\", new()\n    {\n        Name = \"Production\",\n        AssumeRoleArn = dopplerSecretsManager.Arn,\n    });\n\n    var backendProd = new Doppler.SecretsSync.AwsSecretsManager(\"backendProd\", new()\n    {\n        Integration = prod.Id,\n        Project = \"backend\",\n        Config = \"prd\",\n        Region = \"us-east-1\",\n        Path = \"/backend/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Action\": \"sts:AssumeRole\",\n\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Condition\": map[string]interface{}{\n\t\t\t\t\t\t\"StringEquals\": map[string]interface{}{\n\t\t\t\t\t\t\t\"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"secretsmanager:GetSecretValue\",\n\t\t\t\t\t\t\"secretsmanager:DescribeSecret\",\n\t\t\t\t\t\t\"secretsmanager:PutSecretValue\",\n\t\t\t\t\t\t\"secretsmanager:CreateSecret\",\n\t\t\t\t\t\t\"secretsmanager:DeleteSecret\",\n\t\t\t\t\t\t\"secretsmanager:TagResource\",\n\t\t\t\t\t\t\"secretsmanager:UpdateSecret\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Effect\":   \"Allow\",\n\t\t\t\t\t\"Resource\": \"*\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tdopplerSecretsManager, err := iam.NewRole(ctx, \"dopplerSecretsManager\", \u0026iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.String(json0),\n\t\t\tInlinePolicies: iam.RoleInlinePolicyArray{\n\t\t\t\t\u0026iam.RoleInlinePolicyArgs{\n\t\t\t\t\tPolicy: pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprod, err := integration.NewAwsSecretsManager(ctx, \"prod\", \u0026integration.AwsSecretsManagerArgs{\n\t\t\tName:          pulumi.String(\"Production\"),\n\t\t\tAssumeRoleArn: dopplerSecretsManager.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = secretsSync.NewAwsSecretsManager(ctx, \"backendProd\", \u0026secretsSync.AwsSecretsManagerArgs{\n\t\t\tIntegration: prod.ID(),\n\t\t\tProject:     pulumi.String(\"backend\"),\n\t\t\tConfig:      pulumi.String(\"prd\"),\n\t\t\tRegion:      pulumi.String(\"us-east-1\"),\n\t\t\tPath:        pulumi.String(\"/backend/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;\nimport com.pulumi.doppler.integration.AwsSecretsManager;\nimport com.pulumi.doppler.integration.AwsSecretsManagerArgs;\nimport com.pulumi.doppler.secretsSync.AwsSecretsManager;\nimport com.pulumi.doppler.secretsSync.AwsSecretsManagerArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dopplerSecretsManager = new Role(\"dopplerSecretsManager\", RoleArgs.builder()        \n            .assumeRolePolicy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Action\", \"sts:AssumeRole\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"AWS\", \"arn:aws:iam::299900769157:user/doppler-integration-operator\")\n                        )),\n                        jsonProperty(\"Condition\", jsonObject(\n                            jsonProperty(\"StringEquals\", jsonObject(\n                                jsonProperty(\"sts:ExternalId\", \"\u003cYOUR_WORKPLACE_SLUG\u003e\")\n                            ))\n                        ))\n                    )))\n                )))\n            .inlinePolicies(RoleInlinePolicyArgs.builder()\n                .policy(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2012-10-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Action\", jsonArray(\n                                \"secretsmanager:GetSecretValue\", \n                                \"secretsmanager:DescribeSecret\", \n                                \"secretsmanager:PutSecretValue\", \n                                \"secretsmanager:CreateSecret\", \n                                \"secretsmanager:DeleteSecret\", \n                                \"secretsmanager:TagResource\", \n                                \"secretsmanager:UpdateSecret\"\n                            )),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Resource\", \"*\")\n                        )))\n                    )))\n                .build())\n            .build());\n\n        var prod = new AwsSecretsManager(\"prod\", AwsSecretsManagerArgs.builder()        \n            .name(\"Production\")\n            .assumeRoleArn(dopplerSecretsManager.arn())\n            .build());\n\n        var backendProd = new AwsSecretsManager(\"backendProd\", AwsSecretsManagerArgs.builder()        \n            .integration(prod.id())\n            .project(\"backend\")\n            .config(\"prd\")\n            .region(\"us-east-1\")\n            .path(\"/backend/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dopplerSecretsManager:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Effect: Allow\n              Action: sts:AssumeRole\n              Principal:\n                AWS: arn:aws:iam::299900769157:user/doppler-integration-operator\n              Condition:\n                StringEquals:\n                  sts:ExternalId: \u003cYOUR_WORKPLACE_SLUG\u003e\n      inlinePolicies:\n        - policy:\n            fn::toJSON:\n              Version: 2012-10-17\n              Statement:\n                - Action:\n                    - secretsmanager:GetSecretValue\n                    - secretsmanager:DescribeSecret\n                    - secretsmanager:PutSecretValue\n                    - secretsmanager:CreateSecret\n                    - secretsmanager:DeleteSecret\n                    - secretsmanager:TagResource\n                    - secretsmanager:UpdateSecret\n                  Effect: Allow\n                  Resource: '*'\n  prod:\n    type: doppler:integration:AwsSecretsManager\n    properties:\n      name: Production\n      assumeRoleArn: ${dopplerSecretsManager.arn}\n  backendProd:\n    type: doppler:secretsSync:AwsSecretsManager\n    properties:\n      integration: ${prod.id}\n      project: backend\n      config: prd\n      region: us-east-1\n      path: /backend/\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the AWS role for Doppler to assume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration\n"
                }
            },
            "required": [
                "assumeRoleArn",
                "name"
            ],
            "inputProperties": {
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the AWS role for Doppler to assume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "assumeRoleArn",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSecretsManager resources.\n",
                "properties": {
                    "assumeRoleArn": {
                        "type": "string",
                        "description": "The ARN of the AWS role for Doppler to assume\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "doppler:secretsSync/awsParameterStore:AwsParameterStore": {
            "description": "Manage an AWS Parameter Store Doppler sync.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst dopplerParameterStore = new aws.index.Aws_iam_role(\"dopplerParameterStore\", {\n    name: \"doppler_parameter_store\",\n    assumeRolePolicy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: \"sts:AssumeRole\",\n            Principal: {\n                AWS: \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            Condition: {\n                StringEquals: {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inlinePolicy: [{\n        name: \"doppler_secret_manager\",\n        policy: JSON.stringify({\n            Version: \"2012-10-17\",\n            Statement: [{\n                Action: [\n                    \"ssm:PutParameter\",\n                    \"ssm:LabelParameterVersion\",\n                    \"ssm:DeleteParameter\",\n                    \"ssm:RemoveTagsFromResource\",\n                    \"ssm:GetParameterHistory\",\n                    \"ssm:AddTagsToResource\",\n                    \"ssm:GetParametersByPath\",\n                    \"ssm:GetParameters\",\n                    \"ssm:GetParameter\",\n                    \"ssm:DeleteParameters\",\n                ],\n                Effect: \"Allow\",\n                Resource: \"*\",\n            }],\n        }),\n    }],\n});\nconst prod = new doppler.integration.AwsParameterStore(\"prod\", {\n    name: \"Production\",\n    assumeRoleArn: dopplerParameterStore.arn,\n});\nconst backendProd = new doppler.secretssync.AwsParameterStore(\"backendProd\", {\n    integration: prod.id,\n    project: \"backend\",\n    config: \"prd\",\n    region: \"us-east-1\",\n    path: \"/backend/\",\n    secureString: true,\n    tags: {\n        myTag: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_aws as aws\nimport pulumiverse_doppler as doppler\n\ndoppler_parameter_store = aws.iam.Role(\"dopplerParameterStore\",\n    assume_role_policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inline_policies=[aws.iam.RoleInlinePolicyArgs(\n        policy=json.dumps({\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{\n                \"Action\": [\n                    \"ssm:PutParameter\",\n                    \"ssm:LabelParameterVersion\",\n                    \"ssm:DeleteParameter\",\n                    \"ssm:RemoveTagsFromResource\",\n                    \"ssm:GetParameterHistory\",\n                    \"ssm:AddTagsToResource\",\n                    \"ssm:GetParametersByPath\",\n                    \"ssm:GetParameters\",\n                    \"ssm:GetParameter\",\n                    \"ssm:DeleteParameters\",\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\",\n            }],\n        }),\n    )])\nprod = doppler.integration.AwsParameterStore(\"prod\",\n    name=\"Production\",\n    assume_role_arn=doppler_parameter_store.arn)\nbackend_prod = doppler.secrets_sync.AwsParameterStore(\"backendProd\",\n    integration=prod.id,\n    project=\"backend\",\n    config=\"prd\",\n    region=\"us-east-1\",\n    path=\"/backend/\",\n    secure_string=True,\n    tags={\n        \"myTag\": \"enabled\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dopplerParameterStore = new Aws.Iam.Role(\"dopplerParameterStore\", new()\n    {\n        AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = \"sts:AssumeRole\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"AWS\"] = \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n                    },\n                    [\"Condition\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"StringEquals\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"sts:ExternalId\"] = \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                        },\n                    },\n                },\n            },\n        }),\n        InlinePolicies = new[]\n        {\n            new Aws.Iam.Inputs.RoleInlinePolicyArgs\n            {\n                Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Version\"] = \"2012-10-17\",\n                    [\"Statement\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"Action\"] = new[]\n                            {\n                                \"ssm:PutParameter\",\n                                \"ssm:LabelParameterVersion\",\n                                \"ssm:DeleteParameter\",\n                                \"ssm:RemoveTagsFromResource\",\n                                \"ssm:GetParameterHistory\",\n                                \"ssm:AddTagsToResource\",\n                                \"ssm:GetParametersByPath\",\n                                \"ssm:GetParameters\",\n                                \"ssm:GetParameter\",\n                                \"ssm:DeleteParameters\",\n                            },\n                            [\"Effect\"] = \"Allow\",\n                            [\"Resource\"] = \"*\",\n                        },\n                    },\n                }),\n            },\n        },\n    });\n\n    var prod = new Doppler.Integration.AwsParameterStore(\"prod\", new()\n    {\n        Name = \"Production\",\n        AssumeRoleArn = dopplerParameterStore.Arn,\n    });\n\n    var backendProd = new Doppler.SecretsSync.AwsParameterStore(\"backendProd\", new()\n    {\n        Integration = prod.Id,\n        Project = \"backend\",\n        Config = \"prd\",\n        Region = \"us-east-1\",\n        Path = \"/backend/\",\n        SecureString = true,\n        Tags = \n        {\n            { \"myTag\", \"enabled\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Action\": \"sts:AssumeRole\",\n\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Condition\": map[string]interface{}{\n\t\t\t\t\t\t\"StringEquals\": map[string]interface{}{\n\t\t\t\t\t\t\t\"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"ssm:PutParameter\",\n\t\t\t\t\t\t\"ssm:LabelParameterVersion\",\n\t\t\t\t\t\t\"ssm:DeleteParameter\",\n\t\t\t\t\t\t\"ssm:RemoveTagsFromResource\",\n\t\t\t\t\t\t\"ssm:GetParameterHistory\",\n\t\t\t\t\t\t\"ssm:AddTagsToResource\",\n\t\t\t\t\t\t\"ssm:GetParametersByPath\",\n\t\t\t\t\t\t\"ssm:GetParameters\",\n\t\t\t\t\t\t\"ssm:GetParameter\",\n\t\t\t\t\t\t\"ssm:DeleteParameters\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Effect\":   \"Allow\",\n\t\t\t\t\t\"Resource\": \"*\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tdopplerParameterStore, err := iam.NewRole(ctx, \"dopplerParameterStore\", \u0026iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.String(json0),\n\t\t\tInlinePolicies: iam.RoleInlinePolicyArray{\n\t\t\t\t\u0026iam.RoleInlinePolicyArgs{\n\t\t\t\t\tPolicy: pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprod, err := integration.NewAwsParameterStore(ctx, \"prod\", \u0026integration.AwsParameterStoreArgs{\n\t\t\tName:          pulumi.String(\"Production\"),\n\t\t\tAssumeRoleArn: dopplerParameterStore.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = secretsSync.NewAwsParameterStore(ctx, \"backendProd\", \u0026secretsSync.AwsParameterStoreArgs{\n\t\t\tIntegration:  prod.ID(),\n\t\t\tProject:      pulumi.String(\"backend\"),\n\t\t\tConfig:       pulumi.String(\"prd\"),\n\t\t\tRegion:       pulumi.String(\"us-east-1\"),\n\t\t\tPath:         pulumi.String(\"/backend/\"),\n\t\t\tSecureString: pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"myTag\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;\nimport com.pulumi.doppler.integration.AwsParameterStore;\nimport com.pulumi.doppler.integration.AwsParameterStoreArgs;\nimport com.pulumi.doppler.secretsSync.AwsParameterStore;\nimport com.pulumi.doppler.secretsSync.AwsParameterStoreArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dopplerParameterStore = new Role(\"dopplerParameterStore\", RoleArgs.builder()        \n            .assumeRolePolicy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Action\", \"sts:AssumeRole\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"AWS\", \"arn:aws:iam::299900769157:user/doppler-integration-operator\")\n                        )),\n                        jsonProperty(\"Condition\", jsonObject(\n                            jsonProperty(\"StringEquals\", jsonObject(\n                                jsonProperty(\"sts:ExternalId\", \"\u003cYOUR_WORKPLACE_SLUG\u003e\")\n                            ))\n                        ))\n                    )))\n                )))\n            .inlinePolicies(RoleInlinePolicyArgs.builder()\n                .policy(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2012-10-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Action\", jsonArray(\n                                \"ssm:PutParameter\", \n                                \"ssm:LabelParameterVersion\", \n                                \"ssm:DeleteParameter\", \n                                \"ssm:RemoveTagsFromResource\", \n                                \"ssm:GetParameterHistory\", \n                                \"ssm:AddTagsToResource\", \n                                \"ssm:GetParametersByPath\", \n                                \"ssm:GetParameters\", \n                                \"ssm:GetParameter\", \n                                \"ssm:DeleteParameters\"\n                            )),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Resource\", \"*\")\n                        )))\n                    )))\n                .build())\n            .build());\n\n        var prod = new AwsParameterStore(\"prod\", AwsParameterStoreArgs.builder()        \n            .name(\"Production\")\n            .assumeRoleArn(dopplerParameterStore.arn())\n            .build());\n\n        var backendProd = new AwsParameterStore(\"backendProd\", AwsParameterStoreArgs.builder()        \n            .integration(prod.id())\n            .project(\"backend\")\n            .config(\"prd\")\n            .region(\"us-east-1\")\n            .path(\"/backend/\")\n            .secureString(true)\n            .tags(Map.of(\"myTag\", \"enabled\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dopplerParameterStore:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Effect: Allow\n              Action: sts:AssumeRole\n              Principal:\n                AWS: arn:aws:iam::299900769157:user/doppler-integration-operator\n              Condition:\n                StringEquals:\n                  sts:ExternalId: \u003cYOUR_WORKPLACE_SLUG\u003e\n      inlinePolicies:\n        - policy:\n            fn::toJSON:\n              Version: 2012-10-17\n              Statement:\n                - Action:\n                    - ssm:PutParameter\n                    - ssm:LabelParameterVersion\n                    - ssm:DeleteParameter\n                    - ssm:RemoveTagsFromResource\n                    - ssm:GetParameterHistory\n                    - ssm:AddTagsToResource\n                    - ssm:GetParametersByPath\n                    - ssm:GetParameters\n                    - ssm:GetParameter\n                    - ssm:DeleteParameters\n                  Effect: Allow\n                  Resource: '*'\n  prod:\n    type: doppler:integration:AwsParameterStore\n    properties:\n      name: Production\n      assumeRoleArn: ${dopplerParameterStore.arn}\n  backendProd:\n    type: doppler:secretsSync:AwsParameterStore\n    properties:\n      integration: ${prod.id}\n      project: backend\n      config: prd\n      region: us-east-1\n      path: /backend/\n      secureString: true\n      tags:\n        myTag: enabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "integration": {
                    "type": "string",
                    "description": "The slug of the integration to use for this sync\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the parameters in AWS\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region\n"
                },
                "secureString": {
                    "type": "boolean",
                    "description": "Whether or not the parameters are stored as a secure string\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "AWS tags to attach to the parameters\n"
                }
            },
            "required": [
                "config",
                "integration",
                "path",
                "project",
                "region"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n",
                    "willReplaceOnChanges": true
                },
                "integration": {
                    "type": "string",
                    "description": "The slug of the integration to use for this sync\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to the parameters in AWS\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region\n",
                    "willReplaceOnChanges": true
                },
                "secureString": {
                    "type": "boolean",
                    "description": "Whether or not the parameters are stored as a secure string\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "AWS tags to attach to the parameters\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "integration",
                "path",
                "project",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsParameterStore resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config\n",
                        "willReplaceOnChanges": true
                    },
                    "integration": {
                        "type": "string",
                        "description": "The slug of the integration to use for this sync\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the parameters in AWS\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region\n",
                        "willReplaceOnChanges": true
                    },
                    "secureString": {
                        "type": "boolean",
                        "description": "Whether or not the parameters are stored as a secure string\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "AWS tags to attach to the parameters\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "doppler:secretsSync/awsSecretsManager:AwsSecretsManager": {
            "description": "Manage an AWS Secrets Manager Doppler sync.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as doppler from \"@pulumiverse/doppler\";\n\nconst dopplerSecretsManager = new aws.iam.Role(\"dopplerSecretsManager\", {\n    assumeRolePolicy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: \"sts:AssumeRole\",\n            Principal: {\n                AWS: \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            Condition: {\n                StringEquals: {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inlinePolicies: [{\n        policy: JSON.stringify({\n            Version: \"2012-10-17\",\n            Statement: [{\n                Action: [\n                    \"secretsmanager:GetSecretValue\",\n                    \"secretsmanager:DescribeSecret\",\n                    \"secretsmanager:PutSecretValue\",\n                    \"secretsmanager:CreateSecret\",\n                    \"secretsmanager:DeleteSecret\",\n                    \"secretsmanager:TagResource\",\n                    \"secretsmanager:UpdateSecret\",\n                ],\n                Effect: \"Allow\",\n                Resource: \"*\",\n            }],\n        }),\n    }],\n});\nconst prod = new doppler.integration.AwsSecretsManager(\"prod\", {\n    name: \"Production\",\n    assumeRoleArn: dopplerSecretsManager.arn,\n});\nconst backendProd = new doppler.secretssync.AwsSecretsManager(\"backendProd\", {\n    integration: prod.id,\n    project: \"backend\",\n    config: \"prd\",\n    region: \"us-east-1\",\n    path: \"/backend/\",\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_aws as aws\nimport pulumiverse_doppler as doppler\n\ndoppler_secrets_manager = aws.iam.Role(\"dopplerSecretsManager\",\n    assume_role_policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n            },\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                },\n            },\n        }],\n    }),\n    inline_policies=[aws.iam.RoleInlinePolicyArgs(\n        policy=json.dumps({\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{\n                \"Action\": [\n                    \"secretsmanager:GetSecretValue\",\n                    \"secretsmanager:DescribeSecret\",\n                    \"secretsmanager:PutSecretValue\",\n                    \"secretsmanager:CreateSecret\",\n                    \"secretsmanager:DeleteSecret\",\n                    \"secretsmanager:TagResource\",\n                    \"secretsmanager:UpdateSecret\",\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\",\n            }],\n        }),\n    )])\nprod = doppler.integration.AwsSecretsManager(\"prod\",\n    name=\"Production\",\n    assume_role_arn=doppler_secrets_manager.arn)\nbackend_prod = doppler.secrets_sync.AwsSecretsManager(\"backendProd\",\n    integration=prod.id,\n    project=\"backend\",\n    config=\"prd\",\n    region=\"us-east-1\",\n    path=\"/backend/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Doppler = Pulumiverse.Doppler;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dopplerSecretsManager = new Aws.Iam.Role(\"dopplerSecretsManager\", new()\n    {\n        AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = \"sts:AssumeRole\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"AWS\"] = \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n                    },\n                    [\"Condition\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"StringEquals\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"sts:ExternalId\"] = \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n                        },\n                    },\n                },\n            },\n        }),\n        InlinePolicies = new[]\n        {\n            new Aws.Iam.Inputs.RoleInlinePolicyArgs\n            {\n                Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Version\"] = \"2012-10-17\",\n                    [\"Statement\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"Action\"] = new[]\n                            {\n                                \"secretsmanager:GetSecretValue\",\n                                \"secretsmanager:DescribeSecret\",\n                                \"secretsmanager:PutSecretValue\",\n                                \"secretsmanager:CreateSecret\",\n                                \"secretsmanager:DeleteSecret\",\n                                \"secretsmanager:TagResource\",\n                                \"secretsmanager:UpdateSecret\",\n                            },\n                            [\"Effect\"] = \"Allow\",\n                            [\"Resource\"] = \"*\",\n                        },\n                    },\n                }),\n            },\n        },\n    });\n\n    var prod = new Doppler.Integration.AwsSecretsManager(\"prod\", new()\n    {\n        Name = \"Production\",\n        AssumeRoleArn = dopplerSecretsManager.Arn,\n    });\n\n    var backendProd = new Doppler.SecretsSync.AwsSecretsManager(\"backendProd\", new()\n    {\n        Integration = prod.Id,\n        Project = \"backend\",\n        Config = \"prd\",\n        Region = \"us-east-1\",\n        Path = \"/backend/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration\"\n\t\"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Action\": \"sts:AssumeRole\",\n\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\"AWS\": \"arn:aws:iam::299900769157:user/doppler-integration-operator\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Condition\": map[string]interface{}{\n\t\t\t\t\t\t\"StringEquals\": map[string]interface{}{\n\t\t\t\t\t\t\t\"sts:ExternalId\": \"\u003cYOUR_WORKPLACE_SLUG\u003e\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"secretsmanager:GetSecretValue\",\n\t\t\t\t\t\t\"secretsmanager:DescribeSecret\",\n\t\t\t\t\t\t\"secretsmanager:PutSecretValue\",\n\t\t\t\t\t\t\"secretsmanager:CreateSecret\",\n\t\t\t\t\t\t\"secretsmanager:DeleteSecret\",\n\t\t\t\t\t\t\"secretsmanager:TagResource\",\n\t\t\t\t\t\t\"secretsmanager:UpdateSecret\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Effect\":   \"Allow\",\n\t\t\t\t\t\"Resource\": \"*\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tdopplerSecretsManager, err := iam.NewRole(ctx, \"dopplerSecretsManager\", \u0026iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.String(json0),\n\t\t\tInlinePolicies: iam.RoleInlinePolicyArray{\n\t\t\t\t\u0026iam.RoleInlinePolicyArgs{\n\t\t\t\t\tPolicy: pulumi.String(json1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprod, err := integration.NewAwsSecretsManager(ctx, \"prod\", \u0026integration.AwsSecretsManagerArgs{\n\t\t\tName:          pulumi.String(\"Production\"),\n\t\t\tAssumeRoleArn: dopplerSecretsManager.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = secretsSync.NewAwsSecretsManager(ctx, \"backendProd\", \u0026secretsSync.AwsSecretsManagerArgs{\n\t\t\tIntegration: prod.ID(),\n\t\t\tProject:     pulumi.String(\"backend\"),\n\t\t\tConfig:      pulumi.String(\"prd\"),\n\t\t\tRegion:      pulumi.String(\"us-east-1\"),\n\t\t\tPath:        pulumi.String(\"/backend/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;\nimport com.pulumi.doppler.integration.AwsSecretsManager;\nimport com.pulumi.doppler.integration.AwsSecretsManagerArgs;\nimport com.pulumi.doppler.secretsSync.AwsSecretsManager;\nimport com.pulumi.doppler.secretsSync.AwsSecretsManagerArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dopplerSecretsManager = new Role(\"dopplerSecretsManager\", RoleArgs.builder()        \n            .assumeRolePolicy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Action\", \"sts:AssumeRole\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"AWS\", \"arn:aws:iam::299900769157:user/doppler-integration-operator\")\n                        )),\n                        jsonProperty(\"Condition\", jsonObject(\n                            jsonProperty(\"StringEquals\", jsonObject(\n                                jsonProperty(\"sts:ExternalId\", \"\u003cYOUR_WORKPLACE_SLUG\u003e\")\n                            ))\n                        ))\n                    )))\n                )))\n            .inlinePolicies(RoleInlinePolicyArgs.builder()\n                .policy(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2012-10-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Action\", jsonArray(\n                                \"secretsmanager:GetSecretValue\", \n                                \"secretsmanager:DescribeSecret\", \n                                \"secretsmanager:PutSecretValue\", \n                                \"secretsmanager:CreateSecret\", \n                                \"secretsmanager:DeleteSecret\", \n                                \"secretsmanager:TagResource\", \n                                \"secretsmanager:UpdateSecret\"\n                            )),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Resource\", \"*\")\n                        )))\n                    )))\n                .build())\n            .build());\n\n        var prod = new AwsSecretsManager(\"prod\", AwsSecretsManagerArgs.builder()        \n            .name(\"Production\")\n            .assumeRoleArn(dopplerSecretsManager.arn())\n            .build());\n\n        var backendProd = new AwsSecretsManager(\"backendProd\", AwsSecretsManagerArgs.builder()        \n            .integration(prod.id())\n            .project(\"backend\")\n            .config(\"prd\")\n            .region(\"us-east-1\")\n            .path(\"/backend/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dopplerSecretsManager:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Effect: Allow\n              Action: sts:AssumeRole\n              Principal:\n                AWS: arn:aws:iam::299900769157:user/doppler-integration-operator\n              Condition:\n                StringEquals:\n                  sts:ExternalId: \u003cYOUR_WORKPLACE_SLUG\u003e\n      inlinePolicies:\n        - policy:\n            fn::toJSON:\n              Version: 2012-10-17\n              Statement:\n                - Action:\n                    - secretsmanager:GetSecretValue\n                    - secretsmanager:DescribeSecret\n                    - secretsmanager:PutSecretValue\n                    - secretsmanager:CreateSecret\n                    - secretsmanager:DeleteSecret\n                    - secretsmanager:TagResource\n                    - secretsmanager:UpdateSecret\n                  Effect: Allow\n                  Resource: '*'\n  prod:\n    type: doppler:integration:AwsSecretsManager\n    properties:\n      name: Production\n      assumeRoleArn: ${dopplerSecretsManager.arn}\n  backendProd:\n    type: doppler:secretsSync:AwsSecretsManager\n    properties:\n      integration: ${prod.id}\n      project: backend\n      config: prd\n      region: us-east-1\n      path: /backend/\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n"
                },
                "integration": {
                    "type": "string",
                    "description": "The slug of the integration to use for this sync\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the secret in AWS\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region\n"
                }
            },
            "required": [
                "config",
                "integration",
                "path",
                "project",
                "region"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The name of the Doppler config\n",
                    "willReplaceOnChanges": true
                },
                "integration": {
                    "type": "string",
                    "description": "The slug of the integration to use for this sync\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to the secret in AWS\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The name of the Doppler project\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "integration",
                "path",
                "project",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSecretsManager resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config\n",
                        "willReplaceOnChanges": true
                    },
                    "integration": {
                        "type": "string",
                        "description": "The slug of the integration to use for this sync\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the secret in AWS\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "doppler:index/getSecrets:getSecrets": {
            "description": "Retrieve all secrets in the config.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecrets.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config (required for personal tokens)\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project (required for personal tokens)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecrets.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The name of the Doppler config (required for personal tokens)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "map": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of secret names to computed secret values\n",
                        "secret": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the Doppler project (required for personal tokens)\n"
                    }
                },
                "type": "object",
                "required": [
                    "map",
                    "id"
                ]
            }
        }
    }
}