// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler.Integration
{
    /// <summary>
    /// Manage an AWS Parameter Store Doppler integration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Doppler = Pulumiverse.Doppler;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dopplerParameterStore = new Aws.Iam.Role("dopplerParameterStore", new()
    ///     {
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["AWS"] = "arn:aws:iam::299900769157:user/doppler-integration-operator",
    ///                     },
    ///                     ["Condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["StringEquals"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["sts:ExternalId"] = "&lt;YOUR_WORKPLACE_SLUG&gt;",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///         InlinePolicies = new[]
    ///         {
    ///             new Aws.Iam.Inputs.RoleInlinePolicyArgs
    ///             {
    ///                 Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Version"] = "2012-10-17",
    ///                     ["Statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Action"] = new[]
    ///                             {
    ///                                 "ssm:PutParameter",
    ///                                 "ssm:LabelParameterVersion",
    ///                                 "ssm:DeleteParameter",
    ///                                 "ssm:RemoveTagsFromResource",
    ///                                 "ssm:GetParameterHistory",
    ///                                 "ssm:AddTagsToResource",
    ///                                 "ssm:GetParametersByPath",
    ///                                 "ssm:GetParameters",
    ///                                 "ssm:GetParameter",
    ///                                 "ssm:DeleteParameters",
    ///                             },
    ///                             ["Effect"] = "Allow",
    ///                             ["Resource"] = "*",
    ///                         },
    ///                     },
    ///                 }),
    ///             },
    ///         },
    ///     });
    /// 
    ///     var prod = new Doppler.Integration.AwsParameterStore("prod", new()
    ///     {
    ///         Name = "Production",
    ///         AssumeRoleArn = dopplerParameterStore.Arn,
    ///     });
    /// 
    ///     var backendProd = new Doppler.SecretsSync.AwsParameterStore("backendProd", new()
    ///     {
    ///         Integration = prod.Id,
    ///         Project = "backend",
    ///         Config = "prd",
    ///         Region = "us-east-1",
    ///         Path = "/backend/",
    ///         SecureString = true,
    ///         Tags = 
    ///         {
    ///             { "myTag", "enabled" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DopplerResourceType("doppler:integration/awsParameterStore:AwsParameterStore")]
    public partial class AwsParameterStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the AWS role for Doppler to assume
        /// </summary>
        [Output("assumeRoleArn")]
        public Output<string> AssumeRoleArn { get; private set; } = null!;

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a AwsParameterStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsParameterStore(string name, AwsParameterStoreArgs args, CustomResourceOptions? options = null)
            : base("doppler:integration/awsParameterStore:AwsParameterStore", name, args ?? new AwsParameterStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsParameterStore(string name, Input<string> id, AwsParameterStoreState? state = null, CustomResourceOptions? options = null)
            : base("doppler:integration/awsParameterStore:AwsParameterStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsParameterStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsParameterStore Get(string name, Input<string> id, AwsParameterStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsParameterStore(name, id, state, options);
        }
    }

    public sealed class AwsParameterStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the AWS role for Doppler to assume
        /// </summary>
        [Input("assumeRoleArn", required: true)]
        public Input<string> AssumeRoleArn { get; set; } = null!;

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public AwsParameterStoreArgs()
        {
        }
        public static new AwsParameterStoreArgs Empty => new AwsParameterStoreArgs();
    }

    public sealed class AwsParameterStoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the AWS role for Doppler to assume
        /// </summary>
        [Input("assumeRoleArn")]
        public Input<string>? AssumeRoleArn { get; set; }

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AwsParameterStoreState()
        {
        }
        public static new AwsParameterStoreState Empty => new AwsParameterStoreState();
    }
}
