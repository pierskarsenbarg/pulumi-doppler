// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler
{
    /// <summary>
    /// Manage a Doppler project group member.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Doppler = Pulumiverse.Doppler;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var backendEngineering = new Doppler.ProjectMemberGroup("backend_engineering", new()
    ///     {
    ///         Project = "backend",
    ///         GroupSlug = engineering.Slug,
    ///         Role = "collaborator",
    ///         Environments = new[]
    ///         {
    ///             "dev",
    ///             "stg",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DopplerResourceType("doppler:index/projectMemberGroup:ProjectMemberGroup")]
    public partial class ProjectMemberGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<string>> Environments { get; private set; } = null!;

        /// <summary>
        /// The slug of the Doppler group
        /// </summary>
        [Output("groupSlug")]
        public Output<string> GroupSlug { get; private set; } = null!;

        /// <summary>
        /// The name of the Doppler project where the access is applied
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The project role identifier for the access
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectMemberGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectMemberGroup(string name, ProjectMemberGroupArgs args, CustomResourceOptions? options = null)
            : base("doppler:index/projectMemberGroup:ProjectMemberGroup", name, args ?? new ProjectMemberGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectMemberGroup(string name, Input<string> id, ProjectMemberGroupState? state = null, CustomResourceOptions? options = null)
            : base("doppler:index/projectMemberGroup:ProjectMemberGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectMemberGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectMemberGroup Get(string name, Input<string> id, ProjectMemberGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectMemberGroup(name, id, state, options);
        }
    }

    public sealed class ProjectMemberGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        /// <summary>
        /// The slug of the Doppler group
        /// </summary>
        [Input("groupSlug", required: true)]
        public Input<string> GroupSlug { get; set; } = null!;

        /// <summary>
        /// The name of the Doppler project where the access is applied
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The project role identifier for the access
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public ProjectMemberGroupArgs()
        {
        }
        public static new ProjectMemberGroupArgs Empty => new ProjectMemberGroupArgs();
    }

    public sealed class ProjectMemberGroupState : global::Pulumi.ResourceArgs
    {
        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        /// <summary>
        /// The slug of the Doppler group
        /// </summary>
        [Input("groupSlug")]
        public Input<string>? GroupSlug { get; set; }

        /// <summary>
        /// The name of the Doppler project where the access is applied
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The project role identifier for the access
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public ProjectMemberGroupState()
        {
        }
        public static new ProjectMemberGroupState Empty => new ProjectMemberGroupState();
    }
}
