// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler
{
    [DopplerResourceType("doppler:index/webhook:Webhook")]
    public partial class Webhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication method used by the webhook
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.WebhookAuthentication?> Authentication { get; private set; } = null!;

        /// <summary>
        /// Whether the webhook is enabled or disabled.  Default to true.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Configs this webhook will trigger for
        /// </summary>
        [Output("enabledConfigs")]
        public Output<ImmutableArray<string>> EnabledConfigs { get; private set; } = null!;

        /// <summary>
        /// The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        /// </summary>
        [Output("payload")]
        public Output<string?> Payload { get; private set; } = null!;

        /// <summary>
        /// The name of the Doppler project where the webhook is located
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Secret used for request signing
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// The slug of the Webhook
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The URL of the webhook endpoint
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Webhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Webhook(string name, WebhookArgs args, CustomResourceOptions? options = null)
            : base("doppler:index/webhook:Webhook", name, args ?? new WebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Webhook(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
            : base("doppler:index/webhook:Webhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "payload",
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Webhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Webhook Get(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new Webhook(name, id, state, options);
        }
    }

    public sealed class WebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication method used by the webhook
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.WebhookAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// Whether the webhook is enabled or disabled.  Default to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enabledConfigs")]
        private InputList<string>? _enabledConfigs;

        /// <summary>
        /// Configs this webhook will trigger for
        /// </summary>
        public InputList<string> EnabledConfigs
        {
            get => _enabledConfigs ?? (_enabledConfigs = new InputList<string>());
            set => _enabledConfigs = value;
        }

        [Input("payload")]
        private Input<string>? _payload;

        /// <summary>
        /// The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        /// </summary>
        public Input<string>? Payload
        {
            get => _payload;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _payload = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Doppler project where the webhook is located
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret used for request signing
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL of the webhook endpoint
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WebhookArgs()
        {
        }
        public static new WebhookArgs Empty => new WebhookArgs();
    }

    public sealed class WebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication method used by the webhook
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.WebhookAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// Whether the webhook is enabled or disabled.  Default to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enabledConfigs")]
        private InputList<string>? _enabledConfigs;

        /// <summary>
        /// Configs this webhook will trigger for
        /// </summary>
        public InputList<string> EnabledConfigs
        {
            get => _enabledConfigs ?? (_enabledConfigs = new InputList<string>());
            set => _enabledConfigs = value;
        }

        [Input("payload")]
        private Input<string>? _payload;

        /// <summary>
        /// The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        /// </summary>
        public Input<string>? Payload
        {
            get => _payload;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _payload = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Doppler project where the webhook is located
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret used for request signing
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The slug of the Webhook
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The URL of the webhook endpoint
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public WebhookState()
        {
        }
        public static new WebhookState Empty => new WebhookState();
    }
}
