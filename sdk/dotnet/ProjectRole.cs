// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler
{
    /// <summary>
    /// Manage a Doppler project_role.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Doppler = Pulumiverse.Doppler;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var logViewer = new Doppler.ProjectRole("log_viewer", new()
    ///     {
    ///         Name = "Log Viewer",
    ///         Permissions = new[]
    ///         {
    ///             "enclave_config_logs",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import doppler:index/projectRole:ProjectRole default &lt;project-role-identifier&gt;
    /// ```
    /// </summary>
    [DopplerResourceType("doppler:index/projectRole:ProjectRole")]
    public partial class ProjectRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The role's unique identifier
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Whether or not the role is custom (as opposed to Doppler built-in)
        /// </summary>
        [Output("isCustomRole")]
        public Output<bool> IsCustomRole { get; private set; } = null!;

        /// <summary>
        /// The name of the Doppler project role
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectRole(string name, ProjectRoleArgs args, CustomResourceOptions? options = null)
            : base("doppler:index/projectRole:ProjectRole", name, args ?? new ProjectRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectRole(string name, Input<string> id, ProjectRoleState? state = null, CustomResourceOptions? options = null)
            : base("doppler:index/projectRole:ProjectRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectRole Get(string name, Input<string> id, ProjectRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectRole(name, id, state, options);
        }
    }

    public sealed class ProjectRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Doppler project role
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;

        /// <summary>
        /// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public ProjectRoleArgs()
        {
        }
        public static new ProjectRoleArgs Empty => new ProjectRoleArgs();
    }

    public sealed class ProjectRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The role's unique identifier
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Whether or not the role is custom (as opposed to Doppler built-in)
        /// </summary>
        [Input("isCustomRole")]
        public Input<bool>? IsCustomRole { get; set; }

        /// <summary>
        /// The name of the Doppler project role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public ProjectRoleState()
        {
        }
        public static new ProjectRoleState Empty => new ProjectRoleState();
    }
}
