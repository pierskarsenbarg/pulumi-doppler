// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package doppler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a Doppler project group member.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := doppler.NewProjectMemberGroup(ctx, "backend_engineering", &doppler.ProjectMemberGroupArgs{
//				Project:   pulumi.String("backend"),
//				GroupSlug: pulumi.Any(engineering.Slug),
//				Role:      pulumi.String("collaborator"),
//				Environments: pulumi.StringArray{
//					pulumi.String("dev"),
//					pulumi.String("stg"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProjectMemberGroup struct {
	pulumi.CustomResourceState

	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayOutput `pulumi:"environments"`
	// The slug of the Doppler group
	GroupSlug pulumi.StringOutput `pulumi:"groupSlug"`
	// The name of the Doppler project where the access is applied
	Project pulumi.StringOutput `pulumi:"project"`
	// The project role identifier for the access
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewProjectMemberGroup registers a new resource with the given unique name, arguments, and options.
func NewProjectMemberGroup(ctx *pulumi.Context,
	name string, args *ProjectMemberGroupArgs, opts ...pulumi.ResourceOption) (*ProjectMemberGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupSlug == nil {
		return nil, errors.New("invalid value for required argument 'GroupSlug'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMemberGroup
	err := ctx.RegisterResource("doppler:index/projectMemberGroup:ProjectMemberGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMemberGroup gets an existing ProjectMemberGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMemberGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMemberGroupState, opts ...pulumi.ResourceOption) (*ProjectMemberGroup, error) {
	var resource ProjectMemberGroup
	err := ctx.ReadResource("doppler:index/projectMemberGroup:ProjectMemberGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMemberGroup resources.
type projectMemberGroupState struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments []string `pulumi:"environments"`
	// The slug of the Doppler group
	GroupSlug *string `pulumi:"groupSlug"`
	// The name of the Doppler project where the access is applied
	Project *string `pulumi:"project"`
	// The project role identifier for the access
	Role *string `pulumi:"role"`
}

type ProjectMemberGroupState struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayInput
	// The slug of the Doppler group
	GroupSlug pulumi.StringPtrInput
	// The name of the Doppler project where the access is applied
	Project pulumi.StringPtrInput
	// The project role identifier for the access
	Role pulumi.StringPtrInput
}

func (ProjectMemberGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberGroupState)(nil)).Elem()
}

type projectMemberGroupArgs struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments []string `pulumi:"environments"`
	// The slug of the Doppler group
	GroupSlug string `pulumi:"groupSlug"`
	// The name of the Doppler project where the access is applied
	Project string `pulumi:"project"`
	// The project role identifier for the access
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ProjectMemberGroup resource.
type ProjectMemberGroupArgs struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayInput
	// The slug of the Doppler group
	GroupSlug pulumi.StringInput
	// The name of the Doppler project where the access is applied
	Project pulumi.StringInput
	// The project role identifier for the access
	Role pulumi.StringInput
}

func (ProjectMemberGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberGroupArgs)(nil)).Elem()
}

type ProjectMemberGroupInput interface {
	pulumi.Input

	ToProjectMemberGroupOutput() ProjectMemberGroupOutput
	ToProjectMemberGroupOutputWithContext(ctx context.Context) ProjectMemberGroupOutput
}

func (*ProjectMemberGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMemberGroup)(nil)).Elem()
}

func (i *ProjectMemberGroup) ToProjectMemberGroupOutput() ProjectMemberGroupOutput {
	return i.ToProjectMemberGroupOutputWithContext(context.Background())
}

func (i *ProjectMemberGroup) ToProjectMemberGroupOutputWithContext(ctx context.Context) ProjectMemberGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberGroupOutput)
}

// ProjectMemberGroupArrayInput is an input type that accepts ProjectMemberGroupArray and ProjectMemberGroupArrayOutput values.
// You can construct a concrete instance of `ProjectMemberGroupArrayInput` via:
//
//	ProjectMemberGroupArray{ ProjectMemberGroupArgs{...} }
type ProjectMemberGroupArrayInput interface {
	pulumi.Input

	ToProjectMemberGroupArrayOutput() ProjectMemberGroupArrayOutput
	ToProjectMemberGroupArrayOutputWithContext(context.Context) ProjectMemberGroupArrayOutput
}

type ProjectMemberGroupArray []ProjectMemberGroupInput

func (ProjectMemberGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMemberGroup)(nil)).Elem()
}

func (i ProjectMemberGroupArray) ToProjectMemberGroupArrayOutput() ProjectMemberGroupArrayOutput {
	return i.ToProjectMemberGroupArrayOutputWithContext(context.Background())
}

func (i ProjectMemberGroupArray) ToProjectMemberGroupArrayOutputWithContext(ctx context.Context) ProjectMemberGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberGroupArrayOutput)
}

// ProjectMemberGroupMapInput is an input type that accepts ProjectMemberGroupMap and ProjectMemberGroupMapOutput values.
// You can construct a concrete instance of `ProjectMemberGroupMapInput` via:
//
//	ProjectMemberGroupMap{ "key": ProjectMemberGroupArgs{...} }
type ProjectMemberGroupMapInput interface {
	pulumi.Input

	ToProjectMemberGroupMapOutput() ProjectMemberGroupMapOutput
	ToProjectMemberGroupMapOutputWithContext(context.Context) ProjectMemberGroupMapOutput
}

type ProjectMemberGroupMap map[string]ProjectMemberGroupInput

func (ProjectMemberGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMemberGroup)(nil)).Elem()
}

func (i ProjectMemberGroupMap) ToProjectMemberGroupMapOutput() ProjectMemberGroupMapOutput {
	return i.ToProjectMemberGroupMapOutputWithContext(context.Background())
}

func (i ProjectMemberGroupMap) ToProjectMemberGroupMapOutputWithContext(ctx context.Context) ProjectMemberGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberGroupMapOutput)
}

type ProjectMemberGroupOutput struct{ *pulumi.OutputState }

func (ProjectMemberGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMemberGroup)(nil)).Elem()
}

func (o ProjectMemberGroupOutput) ToProjectMemberGroupOutput() ProjectMemberGroupOutput {
	return o
}

func (o ProjectMemberGroupOutput) ToProjectMemberGroupOutputWithContext(ctx context.Context) ProjectMemberGroupOutput {
	return o
}

// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
func (o ProjectMemberGroupOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectMemberGroup) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

// The slug of the Doppler group
func (o ProjectMemberGroupOutput) GroupSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberGroup) pulumi.StringOutput { return v.GroupSlug }).(pulumi.StringOutput)
}

// The name of the Doppler project where the access is applied
func (o ProjectMemberGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The project role identifier for the access
func (o ProjectMemberGroupOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberGroup) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ProjectMemberGroupArrayOutput struct{ *pulumi.OutputState }

func (ProjectMemberGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMemberGroup)(nil)).Elem()
}

func (o ProjectMemberGroupArrayOutput) ToProjectMemberGroupArrayOutput() ProjectMemberGroupArrayOutput {
	return o
}

func (o ProjectMemberGroupArrayOutput) ToProjectMemberGroupArrayOutputWithContext(ctx context.Context) ProjectMemberGroupArrayOutput {
	return o
}

func (o ProjectMemberGroupArrayOutput) Index(i pulumi.IntInput) ProjectMemberGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMemberGroup {
		return vs[0].([]*ProjectMemberGroup)[vs[1].(int)]
	}).(ProjectMemberGroupOutput)
}

type ProjectMemberGroupMapOutput struct{ *pulumi.OutputState }

func (ProjectMemberGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMemberGroup)(nil)).Elem()
}

func (o ProjectMemberGroupMapOutput) ToProjectMemberGroupMapOutput() ProjectMemberGroupMapOutput {
	return o
}

func (o ProjectMemberGroupMapOutput) ToProjectMemberGroupMapOutputWithContext(ctx context.Context) ProjectMemberGroupMapOutput {
	return o
}

func (o ProjectMemberGroupMapOutput) MapIndex(k pulumi.StringInput) ProjectMemberGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMemberGroup {
		return vs[0].(map[string]*ProjectMemberGroup)[vs[1].(string)]
	}).(ProjectMemberGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberGroupInput)(nil)).Elem(), &ProjectMemberGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberGroupArrayInput)(nil)).Elem(), ProjectMemberGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberGroupMapInput)(nil)).Elem(), ProjectMemberGroupMap{})
	pulumi.RegisterOutputType(ProjectMemberGroupOutput{})
	pulumi.RegisterOutputType(ProjectMemberGroupArrayOutput{})
	pulumi.RegisterOutputType(ProjectMemberGroupMapOutput{})
}
