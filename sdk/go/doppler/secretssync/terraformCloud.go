// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretssync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// ## Example Usage
type TerraformCloud struct {
	pulumi.CustomResourceState

	// The name of the Doppler config
	Config pulumi.StringOutput `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration pulumi.StringOutput `pulumi:"integration"`
	// A name transform to apply before syncing secrets: "none" or "lowercase"
	NameTransform pulumi.StringOutput `pulumi:"nameTransform"`
	// The name of the Doppler project
	Project pulumi.StringOutput `pulumi:"project"`
	// Either "workspace" or "variableSet", based on the resource type to sync to
	SyncTarget       pulumi.StringOutput    `pulumi:"syncTarget"`
	VariableSetId    pulumi.StringPtrOutput `pulumi:"variableSetId"`
	VariableSyncType pulumi.StringOutput    `pulumi:"variableSyncType"`
	WorkspaceId      pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewTerraformCloud registers a new resource with the given unique name, arguments, and options.
func NewTerraformCloud(ctx *pulumi.Context,
	name string, args *TerraformCloudArgs, opts ...pulumi.ResourceOption) (*TerraformCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Integration == nil {
		return nil, errors.New("invalid value for required argument 'Integration'")
	}
	if args.NameTransform == nil {
		return nil, errors.New("invalid value for required argument 'NameTransform'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SyncTarget == nil {
		return nil, errors.New("invalid value for required argument 'SyncTarget'")
	}
	if args.VariableSyncType == nil {
		return nil, errors.New("invalid value for required argument 'VariableSyncType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TerraformCloud
	err := ctx.RegisterResource("doppler:secretsSync/terraformCloud:TerraformCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTerraformCloud gets an existing TerraformCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTerraformCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TerraformCloudState, opts ...pulumi.ResourceOption) (*TerraformCloud, error) {
	var resource TerraformCloud
	err := ctx.ReadResource("doppler:secretsSync/terraformCloud:TerraformCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TerraformCloud resources.
type terraformCloudState struct {
	// The name of the Doppler config
	Config *string `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration *string `pulumi:"integration"`
	// A name transform to apply before syncing secrets: "none" or "lowercase"
	NameTransform *string `pulumi:"nameTransform"`
	// The name of the Doppler project
	Project *string `pulumi:"project"`
	// Either "workspace" or "variableSet", based on the resource type to sync to
	SyncTarget       *string `pulumi:"syncTarget"`
	VariableSetId    *string `pulumi:"variableSetId"`
	VariableSyncType *string `pulumi:"variableSyncType"`
	WorkspaceId      *string `pulumi:"workspaceId"`
}

type TerraformCloudState struct {
	// The name of the Doppler config
	Config pulumi.StringPtrInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringPtrInput
	// A name transform to apply before syncing secrets: "none" or "lowercase"
	NameTransform pulumi.StringPtrInput
	// The name of the Doppler project
	Project pulumi.StringPtrInput
	// Either "workspace" or "variableSet", based on the resource type to sync to
	SyncTarget       pulumi.StringPtrInput
	VariableSetId    pulumi.StringPtrInput
	VariableSyncType pulumi.StringPtrInput
	WorkspaceId      pulumi.StringPtrInput
}

func (TerraformCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*terraformCloudState)(nil)).Elem()
}

type terraformCloudArgs struct {
	// The name of the Doppler config
	Config string `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration string `pulumi:"integration"`
	// A name transform to apply before syncing secrets: "none" or "lowercase"
	NameTransform string `pulumi:"nameTransform"`
	// The name of the Doppler project
	Project string `pulumi:"project"`
	// Either "workspace" or "variableSet", based on the resource type to sync to
	SyncTarget       string  `pulumi:"syncTarget"`
	VariableSetId    *string `pulumi:"variableSetId"`
	VariableSyncType string  `pulumi:"variableSyncType"`
	WorkspaceId      *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a TerraformCloud resource.
type TerraformCloudArgs struct {
	// The name of the Doppler config
	Config pulumi.StringInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringInput
	// A name transform to apply before syncing secrets: "none" or "lowercase"
	NameTransform pulumi.StringInput
	// The name of the Doppler project
	Project pulumi.StringInput
	// Either "workspace" or "variableSet", based on the resource type to sync to
	SyncTarget       pulumi.StringInput
	VariableSetId    pulumi.StringPtrInput
	VariableSyncType pulumi.StringInput
	WorkspaceId      pulumi.StringPtrInput
}

func (TerraformCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*terraformCloudArgs)(nil)).Elem()
}

type TerraformCloudInput interface {
	pulumi.Input

	ToTerraformCloudOutput() TerraformCloudOutput
	ToTerraformCloudOutputWithContext(ctx context.Context) TerraformCloudOutput
}

func (*TerraformCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**TerraformCloud)(nil)).Elem()
}

func (i *TerraformCloud) ToTerraformCloudOutput() TerraformCloudOutput {
	return i.ToTerraformCloudOutputWithContext(context.Background())
}

func (i *TerraformCloud) ToTerraformCloudOutputWithContext(ctx context.Context) TerraformCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformCloudOutput)
}

// TerraformCloudArrayInput is an input type that accepts TerraformCloudArray and TerraformCloudArrayOutput values.
// You can construct a concrete instance of `TerraformCloudArrayInput` via:
//
//	TerraformCloudArray{ TerraformCloudArgs{...} }
type TerraformCloudArrayInput interface {
	pulumi.Input

	ToTerraformCloudArrayOutput() TerraformCloudArrayOutput
	ToTerraformCloudArrayOutputWithContext(context.Context) TerraformCloudArrayOutput
}

type TerraformCloudArray []TerraformCloudInput

func (TerraformCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TerraformCloud)(nil)).Elem()
}

func (i TerraformCloudArray) ToTerraformCloudArrayOutput() TerraformCloudArrayOutput {
	return i.ToTerraformCloudArrayOutputWithContext(context.Background())
}

func (i TerraformCloudArray) ToTerraformCloudArrayOutputWithContext(ctx context.Context) TerraformCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformCloudArrayOutput)
}

// TerraformCloudMapInput is an input type that accepts TerraformCloudMap and TerraformCloudMapOutput values.
// You can construct a concrete instance of `TerraformCloudMapInput` via:
//
//	TerraformCloudMap{ "key": TerraformCloudArgs{...} }
type TerraformCloudMapInput interface {
	pulumi.Input

	ToTerraformCloudMapOutput() TerraformCloudMapOutput
	ToTerraformCloudMapOutputWithContext(context.Context) TerraformCloudMapOutput
}

type TerraformCloudMap map[string]TerraformCloudInput

func (TerraformCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TerraformCloud)(nil)).Elem()
}

func (i TerraformCloudMap) ToTerraformCloudMapOutput() TerraformCloudMapOutput {
	return i.ToTerraformCloudMapOutputWithContext(context.Background())
}

func (i TerraformCloudMap) ToTerraformCloudMapOutputWithContext(ctx context.Context) TerraformCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformCloudMapOutput)
}

type TerraformCloudOutput struct{ *pulumi.OutputState }

func (TerraformCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TerraformCloud)(nil)).Elem()
}

func (o TerraformCloudOutput) ToTerraformCloudOutput() TerraformCloudOutput {
	return o
}

func (o TerraformCloudOutput) ToTerraformCloudOutputWithContext(ctx context.Context) TerraformCloudOutput {
	return o
}

// The name of the Doppler config
func (o TerraformCloudOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The slug of the integration to use for this sync
func (o TerraformCloudOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.Integration }).(pulumi.StringOutput)
}

// A name transform to apply before syncing secrets: "none" or "lowercase"
func (o TerraformCloudOutput) NameTransform() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.NameTransform }).(pulumi.StringOutput)
}

// The name of the Doppler project
func (o TerraformCloudOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Either "workspace" or "variableSet", based on the resource type to sync to
func (o TerraformCloudOutput) SyncTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.SyncTarget }).(pulumi.StringOutput)
}

func (o TerraformCloudOutput) VariableSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringPtrOutput { return v.VariableSetId }).(pulumi.StringPtrOutput)
}

func (o TerraformCloudOutput) VariableSyncType() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringOutput { return v.VariableSyncType }).(pulumi.StringOutput)
}

func (o TerraformCloudOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerraformCloud) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type TerraformCloudArrayOutput struct{ *pulumi.OutputState }

func (TerraformCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TerraformCloud)(nil)).Elem()
}

func (o TerraformCloudArrayOutput) ToTerraformCloudArrayOutput() TerraformCloudArrayOutput {
	return o
}

func (o TerraformCloudArrayOutput) ToTerraformCloudArrayOutputWithContext(ctx context.Context) TerraformCloudArrayOutput {
	return o
}

func (o TerraformCloudArrayOutput) Index(i pulumi.IntInput) TerraformCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TerraformCloud {
		return vs[0].([]*TerraformCloud)[vs[1].(int)]
	}).(TerraformCloudOutput)
}

type TerraformCloudMapOutput struct{ *pulumi.OutputState }

func (TerraformCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TerraformCloud)(nil)).Elem()
}

func (o TerraformCloudMapOutput) ToTerraformCloudMapOutput() TerraformCloudMapOutput {
	return o
}

func (o TerraformCloudMapOutput) ToTerraformCloudMapOutputWithContext(ctx context.Context) TerraformCloudMapOutput {
	return o
}

func (o TerraformCloudMapOutput) MapIndex(k pulumi.StringInput) TerraformCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TerraformCloud {
		return vs[0].(map[string]*TerraformCloud)[vs[1].(string)]
	}).(TerraformCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformCloudInput)(nil)).Elem(), &TerraformCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformCloudArrayInput)(nil)).Elem(), TerraformCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformCloudMapInput)(nil)).Elem(), TerraformCloudMap{})
	pulumi.RegisterOutputType(TerraformCloudOutput{})
	pulumi.RegisterOutputType(TerraformCloudArrayOutput{})
	pulumi.RegisterOutputType(TerraformCloudMapOutput{})
}
