// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretssync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a GitHub Actions Doppler sync.
type GithubActions struct {
	pulumi.CustomResourceState

	// The name of the Doppler config
	Config pulumi.StringOutput `pulumi:"config"`
	// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
	EnvironmentName pulumi.StringPtrOutput `pulumi:"environmentName"`
	// The slug of the integration to use for this sync
	Integration pulumi.StringOutput `pulumi:"integration"`
	// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
	OrgScope pulumi.StringPtrOutput `pulumi:"orgScope"`
	// The name of the Doppler project
	Project pulumi.StringOutput `pulumi:"project"`
	// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
	RepoName pulumi.StringPtrOutput `pulumi:"repoName"`
	// Either "repo" or "org", based on the resource type to sync to
	SyncTarget pulumi.StringOutput `pulumi:"syncTarget"`
}

// NewGithubActions registers a new resource with the given unique name, arguments, and options.
func NewGithubActions(ctx *pulumi.Context,
	name string, args *GithubActionsArgs, opts ...pulumi.ResourceOption) (*GithubActions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Integration == nil {
		return nil, errors.New("invalid value for required argument 'Integration'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SyncTarget == nil {
		return nil, errors.New("invalid value for required argument 'SyncTarget'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GithubActions
	err := ctx.RegisterResource("doppler:secretsSync/githubActions:GithubActions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubActions gets an existing GithubActions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubActions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubActionsState, opts ...pulumi.ResourceOption) (*GithubActions, error) {
	var resource GithubActions
	err := ctx.ReadResource("doppler:secretsSync/githubActions:GithubActions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubActions resources.
type githubActionsState struct {
	// The name of the Doppler config
	Config *string `pulumi:"config"`
	// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
	EnvironmentName *string `pulumi:"environmentName"`
	// The slug of the integration to use for this sync
	Integration *string `pulumi:"integration"`
	// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
	OrgScope *string `pulumi:"orgScope"`
	// The name of the Doppler project
	Project *string `pulumi:"project"`
	// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
	RepoName *string `pulumi:"repoName"`
	// Either "repo" or "org", based on the resource type to sync to
	SyncTarget *string `pulumi:"syncTarget"`
}

type GithubActionsState struct {
	// The name of the Doppler config
	Config pulumi.StringPtrInput
	// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
	EnvironmentName pulumi.StringPtrInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringPtrInput
	// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
	OrgScope pulumi.StringPtrInput
	// The name of the Doppler project
	Project pulumi.StringPtrInput
	// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
	RepoName pulumi.StringPtrInput
	// Either "repo" or "org", based on the resource type to sync to
	SyncTarget pulumi.StringPtrInput
}

func (GithubActionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubActionsState)(nil)).Elem()
}

type githubActionsArgs struct {
	// The name of the Doppler config
	Config string `pulumi:"config"`
	// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
	EnvironmentName *string `pulumi:"environmentName"`
	// The slug of the integration to use for this sync
	Integration string `pulumi:"integration"`
	// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
	OrgScope *string `pulumi:"orgScope"`
	// The name of the Doppler project
	Project string `pulumi:"project"`
	// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
	RepoName *string `pulumi:"repoName"`
	// Either "repo" or "org", based on the resource type to sync to
	SyncTarget string `pulumi:"syncTarget"`
}

// The set of arguments for constructing a GithubActions resource.
type GithubActionsArgs struct {
	// The name of the Doppler config
	Config pulumi.StringInput
	// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
	EnvironmentName pulumi.StringPtrInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringInput
	// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
	OrgScope pulumi.StringPtrInput
	// The name of the Doppler project
	Project pulumi.StringInput
	// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
	RepoName pulumi.StringPtrInput
	// Either "repo" or "org", based on the resource type to sync to
	SyncTarget pulumi.StringInput
}

func (GithubActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubActionsArgs)(nil)).Elem()
}

type GithubActionsInput interface {
	pulumi.Input

	ToGithubActionsOutput() GithubActionsOutput
	ToGithubActionsOutputWithContext(ctx context.Context) GithubActionsOutput
}

func (*GithubActions) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubActions)(nil)).Elem()
}

func (i *GithubActions) ToGithubActionsOutput() GithubActionsOutput {
	return i.ToGithubActionsOutputWithContext(context.Background())
}

func (i *GithubActions) ToGithubActionsOutputWithContext(ctx context.Context) GithubActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionsOutput)
}

// GithubActionsArrayInput is an input type that accepts GithubActionsArray and GithubActionsArrayOutput values.
// You can construct a concrete instance of `GithubActionsArrayInput` via:
//
//	GithubActionsArray{ GithubActionsArgs{...} }
type GithubActionsArrayInput interface {
	pulumi.Input

	ToGithubActionsArrayOutput() GithubActionsArrayOutput
	ToGithubActionsArrayOutputWithContext(context.Context) GithubActionsArrayOutput
}

type GithubActionsArray []GithubActionsInput

func (GithubActionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubActions)(nil)).Elem()
}

func (i GithubActionsArray) ToGithubActionsArrayOutput() GithubActionsArrayOutput {
	return i.ToGithubActionsArrayOutputWithContext(context.Background())
}

func (i GithubActionsArray) ToGithubActionsArrayOutputWithContext(ctx context.Context) GithubActionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionsArrayOutput)
}

// GithubActionsMapInput is an input type that accepts GithubActionsMap and GithubActionsMapOutput values.
// You can construct a concrete instance of `GithubActionsMapInput` via:
//
//	GithubActionsMap{ "key": GithubActionsArgs{...} }
type GithubActionsMapInput interface {
	pulumi.Input

	ToGithubActionsMapOutput() GithubActionsMapOutput
	ToGithubActionsMapOutputWithContext(context.Context) GithubActionsMapOutput
}

type GithubActionsMap map[string]GithubActionsInput

func (GithubActionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubActions)(nil)).Elem()
}

func (i GithubActionsMap) ToGithubActionsMapOutput() GithubActionsMapOutput {
	return i.ToGithubActionsMapOutputWithContext(context.Background())
}

func (i GithubActionsMap) ToGithubActionsMapOutputWithContext(ctx context.Context) GithubActionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionsMapOutput)
}

type GithubActionsOutput struct{ *pulumi.OutputState }

func (GithubActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubActions)(nil)).Elem()
}

func (o GithubActionsOutput) ToGithubActionsOutput() GithubActionsOutput {
	return o
}

func (o GithubActionsOutput) ToGithubActionsOutputWithContext(ctx context.Context) GithubActionsOutput {
	return o
}

// The name of the Doppler config
func (o GithubActionsOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
func (o GithubActionsOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// The slug of the integration to use for this sync
func (o GithubActionsOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringOutput { return v.Integration }).(pulumi.StringOutput)
}

// Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
func (o GithubActionsOutput) OrgScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringPtrOutput { return v.OrgScope }).(pulumi.StringPtrOutput)
}

// The name of the Doppler project
func (o GithubActionsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
func (o GithubActionsOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringPtrOutput { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Either "repo" or "org", based on the resource type to sync to
func (o GithubActionsOutput) SyncTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubActions) pulumi.StringOutput { return v.SyncTarget }).(pulumi.StringOutput)
}

type GithubActionsArrayOutput struct{ *pulumi.OutputState }

func (GithubActionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubActions)(nil)).Elem()
}

func (o GithubActionsArrayOutput) ToGithubActionsArrayOutput() GithubActionsArrayOutput {
	return o
}

func (o GithubActionsArrayOutput) ToGithubActionsArrayOutputWithContext(ctx context.Context) GithubActionsArrayOutput {
	return o
}

func (o GithubActionsArrayOutput) Index(i pulumi.IntInput) GithubActionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubActions {
		return vs[0].([]*GithubActions)[vs[1].(int)]
	}).(GithubActionsOutput)
}

type GithubActionsMapOutput struct{ *pulumi.OutputState }

func (GithubActionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubActions)(nil)).Elem()
}

func (o GithubActionsMapOutput) ToGithubActionsMapOutput() GithubActionsMapOutput {
	return o
}

func (o GithubActionsMapOutput) ToGithubActionsMapOutputWithContext(ctx context.Context) GithubActionsMapOutput {
	return o
}

func (o GithubActionsMapOutput) MapIndex(k pulumi.StringInput) GithubActionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubActions {
		return vs[0].(map[string]*GithubActions)[vs[1].(string)]
	}).(GithubActionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubActionsInput)(nil)).Elem(), &GithubActions{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubActionsArrayInput)(nil)).Elem(), GithubActionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubActionsMapInput)(nil)).Elem(), GithubActionsMap{})
	pulumi.RegisterOutputType(GithubActionsOutput{})
	pulumi.RegisterOutputType(GithubActionsArrayOutput{})
	pulumi.RegisterOutputType(GithubActionsMapOutput{})
}
