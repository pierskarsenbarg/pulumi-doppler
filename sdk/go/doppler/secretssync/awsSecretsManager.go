// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretssync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage an AWS Secrets Manager Doppler sync.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Effect": "Allow",
//						"Action": "sts:AssumeRole",
//						"Principal": map[string]interface{}{
//							"AWS": "arn:aws:iam::299900769157:user/doppler-integration-operator",
//						},
//						"Condition": map[string]interface{}{
//							"StringEquals": map[string]interface{}{
//								"sts:ExternalId": "<YOUR_WORKPLACE_SLUG>",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"secretsmanager:GetSecretValue",
//							"secretsmanager:DescribeSecret",
//							"secretsmanager:PutSecretValue",
//							"secretsmanager:CreateSecret",
//							"secretsmanager:DeleteSecret",
//							"secretsmanager:TagResource",
//							"secretsmanager:UpdateSecret",
//						},
//						"Effect":   "Allow",
//						"Resource": "*",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			dopplerSecretsManager, err := iam.NewRole(ctx, "doppler_secrets_manager", &iam.RoleArgs{
//				Name:             pulumi.String("doppler_secrets_manager"),
//				AssumeRolePolicy: pulumi.String(json0),
//				InlinePolicies: iam.RoleInlinePolicyArray{
//					&iam.RoleInlinePolicyArgs{
//						Name:   pulumi.String("doppler_secret_manager"),
//						Policy: pulumi.String(json1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			prod, err := integration.NewAwsSecretsManager(ctx, "prod", &integration.AwsSecretsManagerArgs{
//				Name:          pulumi.String("Production"),
//				AssumeRoleArn: dopplerSecretsManager.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretsSync.NewAwsSecretsManager(ctx, "backend_prod", &secretsSync.AwsSecretsManagerArgs{
//				Integration: prod.ID(),
//				Project:     pulumi.String("backend"),
//				Config:      pulumi.String("prd"),
//				Region:      pulumi.String("us-east-1"),
//				Path:        pulumi.String("/backend/"),
//				Tags: pulumi.StringMap{
//					"myTag": pulumi.String("enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AwsSecretsManager struct {
	pulumi.CustomResourceState

	// The name of the Doppler config
	Config pulumi.StringOutput `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration pulumi.StringOutput `pulumi:"integration"`
	// The path to the secret in AWS
	Path pulumi.StringOutput `pulumi:"path"`
	// The name of the Doppler project
	Project pulumi.StringOutput `pulumi:"project"`
	// The AWS region
	Region pulumi.StringOutput `pulumi:"region"`
	// AWS tags to attach to the secrets
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewAwsSecretsManager registers a new resource with the given unique name, arguments, and options.
func NewAwsSecretsManager(ctx *pulumi.Context,
	name string, args *AwsSecretsManagerArgs, opts ...pulumi.ResourceOption) (*AwsSecretsManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Integration == nil {
		return nil, errors.New("invalid value for required argument 'Integration'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsSecretsManager
	err := ctx.RegisterResource("doppler:secretsSync/awsSecretsManager:AwsSecretsManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsSecretsManager gets an existing AwsSecretsManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsSecretsManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsSecretsManagerState, opts ...pulumi.ResourceOption) (*AwsSecretsManager, error) {
	var resource AwsSecretsManager
	err := ctx.ReadResource("doppler:secretsSync/awsSecretsManager:AwsSecretsManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsSecretsManager resources.
type awsSecretsManagerState struct {
	// The name of the Doppler config
	Config *string `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration *string `pulumi:"integration"`
	// The path to the secret in AWS
	Path *string `pulumi:"path"`
	// The name of the Doppler project
	Project *string `pulumi:"project"`
	// The AWS region
	Region *string `pulumi:"region"`
	// AWS tags to attach to the secrets
	Tags map[string]string `pulumi:"tags"`
}

type AwsSecretsManagerState struct {
	// The name of the Doppler config
	Config pulumi.StringPtrInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringPtrInput
	// The path to the secret in AWS
	Path pulumi.StringPtrInput
	// The name of the Doppler project
	Project pulumi.StringPtrInput
	// The AWS region
	Region pulumi.StringPtrInput
	// AWS tags to attach to the secrets
	Tags pulumi.StringMapInput
}

func (AwsSecretsManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsSecretsManagerState)(nil)).Elem()
}

type awsSecretsManagerArgs struct {
	// The name of the Doppler config
	Config string `pulumi:"config"`
	// The slug of the integration to use for this sync
	Integration string `pulumi:"integration"`
	// The path to the secret in AWS
	Path string `pulumi:"path"`
	// The name of the Doppler project
	Project string `pulumi:"project"`
	// The AWS region
	Region string `pulumi:"region"`
	// AWS tags to attach to the secrets
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AwsSecretsManager resource.
type AwsSecretsManagerArgs struct {
	// The name of the Doppler config
	Config pulumi.StringInput
	// The slug of the integration to use for this sync
	Integration pulumi.StringInput
	// The path to the secret in AWS
	Path pulumi.StringInput
	// The name of the Doppler project
	Project pulumi.StringInput
	// The AWS region
	Region pulumi.StringInput
	// AWS tags to attach to the secrets
	Tags pulumi.StringMapInput
}

func (AwsSecretsManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsSecretsManagerArgs)(nil)).Elem()
}

type AwsSecretsManagerInput interface {
	pulumi.Input

	ToAwsSecretsManagerOutput() AwsSecretsManagerOutput
	ToAwsSecretsManagerOutputWithContext(ctx context.Context) AwsSecretsManagerOutput
}

func (*AwsSecretsManager) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSecretsManager)(nil)).Elem()
}

func (i *AwsSecretsManager) ToAwsSecretsManagerOutput() AwsSecretsManagerOutput {
	return i.ToAwsSecretsManagerOutputWithContext(context.Background())
}

func (i *AwsSecretsManager) ToAwsSecretsManagerOutputWithContext(ctx context.Context) AwsSecretsManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretsManagerOutput)
}

// AwsSecretsManagerArrayInput is an input type that accepts AwsSecretsManagerArray and AwsSecretsManagerArrayOutput values.
// You can construct a concrete instance of `AwsSecretsManagerArrayInput` via:
//
//	AwsSecretsManagerArray{ AwsSecretsManagerArgs{...} }
type AwsSecretsManagerArrayInput interface {
	pulumi.Input

	ToAwsSecretsManagerArrayOutput() AwsSecretsManagerArrayOutput
	ToAwsSecretsManagerArrayOutputWithContext(context.Context) AwsSecretsManagerArrayOutput
}

type AwsSecretsManagerArray []AwsSecretsManagerInput

func (AwsSecretsManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsSecretsManager)(nil)).Elem()
}

func (i AwsSecretsManagerArray) ToAwsSecretsManagerArrayOutput() AwsSecretsManagerArrayOutput {
	return i.ToAwsSecretsManagerArrayOutputWithContext(context.Background())
}

func (i AwsSecretsManagerArray) ToAwsSecretsManagerArrayOutputWithContext(ctx context.Context) AwsSecretsManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretsManagerArrayOutput)
}

// AwsSecretsManagerMapInput is an input type that accepts AwsSecretsManagerMap and AwsSecretsManagerMapOutput values.
// You can construct a concrete instance of `AwsSecretsManagerMapInput` via:
//
//	AwsSecretsManagerMap{ "key": AwsSecretsManagerArgs{...} }
type AwsSecretsManagerMapInput interface {
	pulumi.Input

	ToAwsSecretsManagerMapOutput() AwsSecretsManagerMapOutput
	ToAwsSecretsManagerMapOutputWithContext(context.Context) AwsSecretsManagerMapOutput
}

type AwsSecretsManagerMap map[string]AwsSecretsManagerInput

func (AwsSecretsManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsSecretsManager)(nil)).Elem()
}

func (i AwsSecretsManagerMap) ToAwsSecretsManagerMapOutput() AwsSecretsManagerMapOutput {
	return i.ToAwsSecretsManagerMapOutputWithContext(context.Background())
}

func (i AwsSecretsManagerMap) ToAwsSecretsManagerMapOutputWithContext(ctx context.Context) AwsSecretsManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretsManagerMapOutput)
}

type AwsSecretsManagerOutput struct{ *pulumi.OutputState }

func (AwsSecretsManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSecretsManager)(nil)).Elem()
}

func (o AwsSecretsManagerOutput) ToAwsSecretsManagerOutput() AwsSecretsManagerOutput {
	return o
}

func (o AwsSecretsManagerOutput) ToAwsSecretsManagerOutputWithContext(ctx context.Context) AwsSecretsManagerOutput {
	return o
}

// The name of the Doppler config
func (o AwsSecretsManagerOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The slug of the integration to use for this sync
func (o AwsSecretsManagerOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringOutput { return v.Integration }).(pulumi.StringOutput)
}

// The path to the secret in AWS
func (o AwsSecretsManagerOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The name of the Doppler project
func (o AwsSecretsManagerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The AWS region
func (o AwsSecretsManagerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// AWS tags to attach to the secrets
func (o AwsSecretsManagerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsSecretsManager) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type AwsSecretsManagerArrayOutput struct{ *pulumi.OutputState }

func (AwsSecretsManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsSecretsManager)(nil)).Elem()
}

func (o AwsSecretsManagerArrayOutput) ToAwsSecretsManagerArrayOutput() AwsSecretsManagerArrayOutput {
	return o
}

func (o AwsSecretsManagerArrayOutput) ToAwsSecretsManagerArrayOutputWithContext(ctx context.Context) AwsSecretsManagerArrayOutput {
	return o
}

func (o AwsSecretsManagerArrayOutput) Index(i pulumi.IntInput) AwsSecretsManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsSecretsManager {
		return vs[0].([]*AwsSecretsManager)[vs[1].(int)]
	}).(AwsSecretsManagerOutput)
}

type AwsSecretsManagerMapOutput struct{ *pulumi.OutputState }

func (AwsSecretsManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsSecretsManager)(nil)).Elem()
}

func (o AwsSecretsManagerMapOutput) ToAwsSecretsManagerMapOutput() AwsSecretsManagerMapOutput {
	return o
}

func (o AwsSecretsManagerMapOutput) ToAwsSecretsManagerMapOutputWithContext(ctx context.Context) AwsSecretsManagerMapOutput {
	return o
}

func (o AwsSecretsManagerMapOutput) MapIndex(k pulumi.StringInput) AwsSecretsManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsSecretsManager {
		return vs[0].(map[string]*AwsSecretsManager)[vs[1].(string)]
	}).(AwsSecretsManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretsManagerInput)(nil)).Elem(), &AwsSecretsManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretsManagerArrayInput)(nil)).Elem(), AwsSecretsManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretsManagerMapInput)(nil)).Elem(), AwsSecretsManagerMap{})
	pulumi.RegisterOutputType(AwsSecretsManagerOutput{})
	pulumi.RegisterOutputType(AwsSecretsManagerArrayOutput{})
	pulumi.RegisterOutputType(AwsSecretsManagerMapOutput{})
}
