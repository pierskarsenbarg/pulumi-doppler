// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package doppler

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

func GetSecrets(ctx *pulumi.Context, args *GetSecretsArgs, opts ...pulumi.InvokeOption) (*GetSecretsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecretsResult
	err := ctx.Invoke("doppler:index/getSecrets:getSecrets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecrets.
type GetSecretsArgs struct {
	// The name of the Doppler config (required for personal tokens)
	Config *string `pulumi:"config"`
	// The name of the Doppler project (required for personal tokens)
	Project *string `pulumi:"project"`
}

// A collection of values returned by getSecrets.
type GetSecretsResult struct {
	// The name of the Doppler config (required for personal tokens)
	Config *string `pulumi:"config"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A mapping of secret names to computed secret values
	Map map[string]string `pulumi:"map"`
	// The name of the Doppler project (required for personal tokens)
	Project *string `pulumi:"project"`
}

func GetSecretsOutput(ctx *pulumi.Context, args GetSecretsOutputArgs, opts ...pulumi.InvokeOption) GetSecretsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSecretsResult, error) {
			args := v.(GetSecretsArgs)
			r, err := GetSecrets(ctx, &args, opts...)
			var s GetSecretsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSecretsResultOutput)
}

// A collection of arguments for invoking getSecrets.
type GetSecretsOutputArgs struct {
	// The name of the Doppler config (required for personal tokens)
	Config pulumi.StringPtrInput `pulumi:"config"`
	// The name of the Doppler project (required for personal tokens)
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetSecretsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsArgs)(nil)).Elem()
}

// A collection of values returned by getSecrets.
type GetSecretsResultOutput struct{ *pulumi.OutputState }

func (GetSecretsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsResult)(nil)).Elem()
}

func (o GetSecretsResultOutput) ToGetSecretsResultOutput() GetSecretsResultOutput {
	return o
}

func (o GetSecretsResultOutput) ToGetSecretsResultOutputWithContext(ctx context.Context) GetSecretsResultOutput {
	return o
}

// The name of the Doppler config (required for personal tokens)
func (o GetSecretsResultOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretsResult) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecretsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A mapping of secret names to computed secret values
func (o GetSecretsResultOutput) Map() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretsResult) map[string]string { return v.Map }).(pulumi.StringMapOutput)
}

// The name of the Doppler project (required for personal tokens)
func (o GetSecretsResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretsResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecretsResultOutput{})
}
