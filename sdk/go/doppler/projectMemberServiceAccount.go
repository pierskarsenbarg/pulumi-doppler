// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package doppler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a Doppler project service account member.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := doppler.NewProjectMemberServiceAccount(ctx, "backend_ci", &doppler.ProjectMemberServiceAccountArgs{
//				Project:            pulumi.String("backend"),
//				ServiceAccountSlug: pulumi.Any(ci.Slug),
//				Role:               pulumi.String("viewer"),
//				Environments: pulumi.StringArray{
//					pulumi.String("dev"),
//					pulumi.String("stg"),
//					pulumi.String("prd"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProjectMemberServiceAccount struct {
	pulumi.CustomResourceState

	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayOutput `pulumi:"environments"`
	// The name of the Doppler project where the access is applied
	Project pulumi.StringOutput `pulumi:"project"`
	// The project role identifier for the access
	Role pulumi.StringOutput `pulumi:"role"`
	// The slug of the Doppler service account
	ServiceAccountSlug pulumi.StringOutput `pulumi:"serviceAccountSlug"`
}

// NewProjectMemberServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewProjectMemberServiceAccount(ctx *pulumi.Context,
	name string, args *ProjectMemberServiceAccountArgs, opts ...pulumi.ResourceOption) (*ProjectMemberServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceAccountSlug == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMemberServiceAccount
	err := ctx.RegisterResource("doppler:index/projectMemberServiceAccount:ProjectMemberServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMemberServiceAccount gets an existing ProjectMemberServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMemberServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMemberServiceAccountState, opts ...pulumi.ResourceOption) (*ProjectMemberServiceAccount, error) {
	var resource ProjectMemberServiceAccount
	err := ctx.ReadResource("doppler:index/projectMemberServiceAccount:ProjectMemberServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMemberServiceAccount resources.
type projectMemberServiceAccountState struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments []string `pulumi:"environments"`
	// The name of the Doppler project where the access is applied
	Project *string `pulumi:"project"`
	// The project role identifier for the access
	Role *string `pulumi:"role"`
	// The slug of the Doppler service account
	ServiceAccountSlug *string `pulumi:"serviceAccountSlug"`
}

type ProjectMemberServiceAccountState struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayInput
	// The name of the Doppler project where the access is applied
	Project pulumi.StringPtrInput
	// The project role identifier for the access
	Role pulumi.StringPtrInput
	// The slug of the Doppler service account
	ServiceAccountSlug pulumi.StringPtrInput
}

func (ProjectMemberServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberServiceAccountState)(nil)).Elem()
}

type projectMemberServiceAccountArgs struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments []string `pulumi:"environments"`
	// The name of the Doppler project where the access is applied
	Project string `pulumi:"project"`
	// The project role identifier for the access
	Role string `pulumi:"role"`
	// The slug of the Doppler service account
	ServiceAccountSlug string `pulumi:"serviceAccountSlug"`
}

// The set of arguments for constructing a ProjectMemberServiceAccount resource.
type ProjectMemberServiceAccountArgs struct {
	// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
	Environments pulumi.StringArrayInput
	// The name of the Doppler project where the access is applied
	Project pulumi.StringInput
	// The project role identifier for the access
	Role pulumi.StringInput
	// The slug of the Doppler service account
	ServiceAccountSlug pulumi.StringInput
}

func (ProjectMemberServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberServiceAccountArgs)(nil)).Elem()
}

type ProjectMemberServiceAccountInput interface {
	pulumi.Input

	ToProjectMemberServiceAccountOutput() ProjectMemberServiceAccountOutput
	ToProjectMemberServiceAccountOutputWithContext(ctx context.Context) ProjectMemberServiceAccountOutput
}

func (*ProjectMemberServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMemberServiceAccount)(nil)).Elem()
}

func (i *ProjectMemberServiceAccount) ToProjectMemberServiceAccountOutput() ProjectMemberServiceAccountOutput {
	return i.ToProjectMemberServiceAccountOutputWithContext(context.Background())
}

func (i *ProjectMemberServiceAccount) ToProjectMemberServiceAccountOutputWithContext(ctx context.Context) ProjectMemberServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberServiceAccountOutput)
}

// ProjectMemberServiceAccountArrayInput is an input type that accepts ProjectMemberServiceAccountArray and ProjectMemberServiceAccountArrayOutput values.
// You can construct a concrete instance of `ProjectMemberServiceAccountArrayInput` via:
//
//	ProjectMemberServiceAccountArray{ ProjectMemberServiceAccountArgs{...} }
type ProjectMemberServiceAccountArrayInput interface {
	pulumi.Input

	ToProjectMemberServiceAccountArrayOutput() ProjectMemberServiceAccountArrayOutput
	ToProjectMemberServiceAccountArrayOutputWithContext(context.Context) ProjectMemberServiceAccountArrayOutput
}

type ProjectMemberServiceAccountArray []ProjectMemberServiceAccountInput

func (ProjectMemberServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMemberServiceAccount)(nil)).Elem()
}

func (i ProjectMemberServiceAccountArray) ToProjectMemberServiceAccountArrayOutput() ProjectMemberServiceAccountArrayOutput {
	return i.ToProjectMemberServiceAccountArrayOutputWithContext(context.Background())
}

func (i ProjectMemberServiceAccountArray) ToProjectMemberServiceAccountArrayOutputWithContext(ctx context.Context) ProjectMemberServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberServiceAccountArrayOutput)
}

// ProjectMemberServiceAccountMapInput is an input type that accepts ProjectMemberServiceAccountMap and ProjectMemberServiceAccountMapOutput values.
// You can construct a concrete instance of `ProjectMemberServiceAccountMapInput` via:
//
//	ProjectMemberServiceAccountMap{ "key": ProjectMemberServiceAccountArgs{...} }
type ProjectMemberServiceAccountMapInput interface {
	pulumi.Input

	ToProjectMemberServiceAccountMapOutput() ProjectMemberServiceAccountMapOutput
	ToProjectMemberServiceAccountMapOutputWithContext(context.Context) ProjectMemberServiceAccountMapOutput
}

type ProjectMemberServiceAccountMap map[string]ProjectMemberServiceAccountInput

func (ProjectMemberServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMemberServiceAccount)(nil)).Elem()
}

func (i ProjectMemberServiceAccountMap) ToProjectMemberServiceAccountMapOutput() ProjectMemberServiceAccountMapOutput {
	return i.ToProjectMemberServiceAccountMapOutputWithContext(context.Background())
}

func (i ProjectMemberServiceAccountMap) ToProjectMemberServiceAccountMapOutputWithContext(ctx context.Context) ProjectMemberServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberServiceAccountMapOutput)
}

type ProjectMemberServiceAccountOutput struct{ *pulumi.OutputState }

func (ProjectMemberServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMemberServiceAccount)(nil)).Elem()
}

func (o ProjectMemberServiceAccountOutput) ToProjectMemberServiceAccountOutput() ProjectMemberServiceAccountOutput {
	return o
}

func (o ProjectMemberServiceAccountOutput) ToProjectMemberServiceAccountOutputWithContext(ctx context.Context) ProjectMemberServiceAccountOutput {
	return o
}

// The environments in the project where this access will apply (null or omitted for roles with access to all environments)
func (o ProjectMemberServiceAccountOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectMemberServiceAccount) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

// The name of the Doppler project where the access is applied
func (o ProjectMemberServiceAccountOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberServiceAccount) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The project role identifier for the access
func (o ProjectMemberServiceAccountOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberServiceAccount) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The slug of the Doppler service account
func (o ProjectMemberServiceAccountOutput) ServiceAccountSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMemberServiceAccount) pulumi.StringOutput { return v.ServiceAccountSlug }).(pulumi.StringOutput)
}

type ProjectMemberServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ProjectMemberServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMemberServiceAccount)(nil)).Elem()
}

func (o ProjectMemberServiceAccountArrayOutput) ToProjectMemberServiceAccountArrayOutput() ProjectMemberServiceAccountArrayOutput {
	return o
}

func (o ProjectMemberServiceAccountArrayOutput) ToProjectMemberServiceAccountArrayOutputWithContext(ctx context.Context) ProjectMemberServiceAccountArrayOutput {
	return o
}

func (o ProjectMemberServiceAccountArrayOutput) Index(i pulumi.IntInput) ProjectMemberServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMemberServiceAccount {
		return vs[0].([]*ProjectMemberServiceAccount)[vs[1].(int)]
	}).(ProjectMemberServiceAccountOutput)
}

type ProjectMemberServiceAccountMapOutput struct{ *pulumi.OutputState }

func (ProjectMemberServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMemberServiceAccount)(nil)).Elem()
}

func (o ProjectMemberServiceAccountMapOutput) ToProjectMemberServiceAccountMapOutput() ProjectMemberServiceAccountMapOutput {
	return o
}

func (o ProjectMemberServiceAccountMapOutput) ToProjectMemberServiceAccountMapOutputWithContext(ctx context.Context) ProjectMemberServiceAccountMapOutput {
	return o
}

func (o ProjectMemberServiceAccountMapOutput) MapIndex(k pulumi.StringInput) ProjectMemberServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMemberServiceAccount {
		return vs[0].(map[string]*ProjectMemberServiceAccount)[vs[1].(string)]
	}).(ProjectMemberServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberServiceAccountInput)(nil)).Elem(), &ProjectMemberServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberServiceAccountArrayInput)(nil)).Elem(), ProjectMemberServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberServiceAccountMapInput)(nil)).Elem(), ProjectMemberServiceAccountMap{})
	pulumi.RegisterOutputType(ProjectMemberServiceAccountOutput{})
	pulumi.RegisterOutputType(ProjectMemberServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ProjectMemberServiceAccountMapOutput{})
}
