// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package doppler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a Doppler service account token.
type ServiceAccountToken struct {
	pulumi.CustomResourceState

	// The api key used to authenticate the service account
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// The datetime that the token was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The display name of the API token
	Name pulumi.StringOutput `pulumi:"name"`
	// Slug of the service account
	ServiceAccountSlug pulumi.StringOutput `pulumi:"serviceAccountSlug"`
	// Slug of the service account token
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewServiceAccountToken registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountToken(ctx *pulumi.Context,
	name string, args *ServiceAccountTokenArgs, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ServiceAccountSlug == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountSlug'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountToken
	err := ctx.RegisterResource("doppler:index/serviceAccountToken:ServiceAccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountToken gets an existing ServiceAccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountTokenState, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	var resource ServiceAccountToken
	err := ctx.ReadResource("doppler:index/serviceAccountToken:ServiceAccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountToken resources.
type serviceAccountTokenState struct {
	// The api key used to authenticate the service account
	ApiKey *string `pulumi:"apiKey"`
	// The datetime that the token was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
	ExpiresAt *string `pulumi:"expiresAt"`
	// The display name of the API token
	Name *string `pulumi:"name"`
	// Slug of the service account
	ServiceAccountSlug *string `pulumi:"serviceAccountSlug"`
	// Slug of the service account token
	Slug *string `pulumi:"slug"`
}

type ServiceAccountTokenState struct {
	// The api key used to authenticate the service account
	ApiKey pulumi.StringPtrInput
	// The datetime that the token was created.
	CreatedAt pulumi.StringPtrInput
	// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrInput
	// The display name of the API token
	Name pulumi.StringPtrInput
	// Slug of the service account
	ServiceAccountSlug pulumi.StringPtrInput
	// Slug of the service account token
	Slug pulumi.StringPtrInput
}

func (ServiceAccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenState)(nil)).Elem()
}

type serviceAccountTokenArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
	ExpiresAt *string `pulumi:"expiresAt"`
	// The display name of the API token
	Name string `pulumi:"name"`
	// Slug of the service account
	ServiceAccountSlug string `pulumi:"serviceAccountSlug"`
}

// The set of arguments for constructing a ServiceAccountToken resource.
type ServiceAccountTokenArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrInput
	// The display name of the API token
	Name pulumi.StringInput
	// Slug of the service account
	ServiceAccountSlug pulumi.StringInput
}

func (ServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenArgs)(nil)).Elem()
}

type ServiceAccountTokenInput interface {
	pulumi.Input

	ToServiceAccountTokenOutput() ServiceAccountTokenOutput
	ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput
}

func (*ServiceAccountToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountToken)(nil)).Elem()
}

func (i *ServiceAccountToken) ToServiceAccountTokenOutput() ServiceAccountTokenOutput {
	return i.ToServiceAccountTokenOutputWithContext(context.Background())
}

func (i *ServiceAccountToken) ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenOutput)
}

// ServiceAccountTokenArrayInput is an input type that accepts ServiceAccountTokenArray and ServiceAccountTokenArrayOutput values.
// You can construct a concrete instance of `ServiceAccountTokenArrayInput` via:
//
//	ServiceAccountTokenArray{ ServiceAccountTokenArgs{...} }
type ServiceAccountTokenArrayInput interface {
	pulumi.Input

	ToServiceAccountTokenArrayOutput() ServiceAccountTokenArrayOutput
	ToServiceAccountTokenArrayOutputWithContext(context.Context) ServiceAccountTokenArrayOutput
}

type ServiceAccountTokenArray []ServiceAccountTokenInput

func (ServiceAccountTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccountToken)(nil)).Elem()
}

func (i ServiceAccountTokenArray) ToServiceAccountTokenArrayOutput() ServiceAccountTokenArrayOutput {
	return i.ToServiceAccountTokenArrayOutputWithContext(context.Background())
}

func (i ServiceAccountTokenArray) ToServiceAccountTokenArrayOutputWithContext(ctx context.Context) ServiceAccountTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenArrayOutput)
}

// ServiceAccountTokenMapInput is an input type that accepts ServiceAccountTokenMap and ServiceAccountTokenMapOutput values.
// You can construct a concrete instance of `ServiceAccountTokenMapInput` via:
//
//	ServiceAccountTokenMap{ "key": ServiceAccountTokenArgs{...} }
type ServiceAccountTokenMapInput interface {
	pulumi.Input

	ToServiceAccountTokenMapOutput() ServiceAccountTokenMapOutput
	ToServiceAccountTokenMapOutputWithContext(context.Context) ServiceAccountTokenMapOutput
}

type ServiceAccountTokenMap map[string]ServiceAccountTokenInput

func (ServiceAccountTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccountToken)(nil)).Elem()
}

func (i ServiceAccountTokenMap) ToServiceAccountTokenMapOutput() ServiceAccountTokenMapOutput {
	return i.ToServiceAccountTokenMapOutputWithContext(context.Background())
}

func (i ServiceAccountTokenMap) ToServiceAccountTokenMapOutputWithContext(ctx context.Context) ServiceAccountTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenMapOutput)
}

type ServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountToken)(nil)).Elem()
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutput() ServiceAccountTokenOutput {
	return o
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput {
	return o
}

// The api key used to authenticate the service account
func (o ServiceAccountTokenOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// The datetime that the token was created.
func (o ServiceAccountTokenOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
func (o ServiceAccountTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The display name of the API token
func (o ServiceAccountTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Slug of the service account
func (o ServiceAccountTokenOutput) ServiceAccountSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringOutput { return v.ServiceAccountSlug }).(pulumi.StringOutput)
}

// Slug of the service account token
func (o ServiceAccountTokenOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type ServiceAccountTokenArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccountToken)(nil)).Elem()
}

func (o ServiceAccountTokenArrayOutput) ToServiceAccountTokenArrayOutput() ServiceAccountTokenArrayOutput {
	return o
}

func (o ServiceAccountTokenArrayOutput) ToServiceAccountTokenArrayOutputWithContext(ctx context.Context) ServiceAccountTokenArrayOutput {
	return o
}

func (o ServiceAccountTokenArrayOutput) Index(i pulumi.IntInput) ServiceAccountTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAccountToken {
		return vs[0].([]*ServiceAccountToken)[vs[1].(int)]
	}).(ServiceAccountTokenOutput)
}

type ServiceAccountTokenMapOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccountToken)(nil)).Elem()
}

func (o ServiceAccountTokenMapOutput) ToServiceAccountTokenMapOutput() ServiceAccountTokenMapOutput {
	return o
}

func (o ServiceAccountTokenMapOutput) ToServiceAccountTokenMapOutputWithContext(ctx context.Context) ServiceAccountTokenMapOutput {
	return o
}

func (o ServiceAccountTokenMapOutput) MapIndex(k pulumi.StringInput) ServiceAccountTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAccountToken {
		return vs[0].(map[string]*ServiceAccountToken)[vs[1].(string)]
	}).(ServiceAccountTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenInput)(nil)).Elem(), &ServiceAccountToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenArrayInput)(nil)).Elem(), ServiceAccountTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenMapInput)(nil)).Elem(), ServiceAccountTokenMap{})
	pulumi.RegisterOutputType(ServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenMapOutput{})
}
