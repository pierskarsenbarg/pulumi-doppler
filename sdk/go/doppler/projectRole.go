// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package doppler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a Doppler project_role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := doppler.NewProjectRole(ctx, "log_viewer", &doppler.ProjectRoleArgs{
//				Name: pulumi.String("Log Viewer"),
//				Permissions: pulumi.StringArray{
//					pulumi.String("enclave_config_logs"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import doppler:index/projectRole:ProjectRole default <project-role-identifier>
// ```
type ProjectRole struct {
	pulumi.CustomResourceState

	// The role's unique identifier
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Whether or not the role is custom (as opposed to Doppler built-in)
	IsCustomRole pulumi.BoolOutput `pulumi:"isCustomRole"`
	// The name of the Doppler project role
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewProjectRole registers a new resource with the given unique name, arguments, and options.
func NewProjectRole(ctx *pulumi.Context,
	name string, args *ProjectRoleArgs, opts ...pulumi.ResourceOption) (*ProjectRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRole
	err := ctx.RegisterResource("doppler:index/projectRole:ProjectRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRole gets an existing ProjectRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRoleState, opts ...pulumi.ResourceOption) (*ProjectRole, error) {
	var resource ProjectRole
	err := ctx.ReadResource("doppler:index/projectRole:ProjectRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRole resources.
type projectRoleState struct {
	// The role's unique identifier
	Identifier *string `pulumi:"identifier"`
	// Whether or not the role is custom (as opposed to Doppler built-in)
	IsCustomRole *bool `pulumi:"isCustomRole"`
	// The name of the Doppler project role
	Name *string `pulumi:"name"`
	// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
	Permissions []string `pulumi:"permissions"`
}

type ProjectRoleState struct {
	// The role's unique identifier
	Identifier pulumi.StringPtrInput
	// Whether or not the role is custom (as opposed to Doppler built-in)
	IsCustomRole pulumi.BoolPtrInput
	// The name of the Doppler project role
	Name pulumi.StringPtrInput
	// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
	Permissions pulumi.StringArrayInput
}

func (ProjectRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRoleState)(nil)).Elem()
}

type projectRoleArgs struct {
	// The name of the Doppler project role
	Name string `pulumi:"name"`
	// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a ProjectRole resource.
type ProjectRoleArgs struct {
	// The name of the Doppler project role
	Name pulumi.StringInput
	// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
	Permissions pulumi.StringArrayInput
}

func (ProjectRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRoleArgs)(nil)).Elem()
}

type ProjectRoleInput interface {
	pulumi.Input

	ToProjectRoleOutput() ProjectRoleOutput
	ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput
}

func (*ProjectRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRole)(nil)).Elem()
}

func (i *ProjectRole) ToProjectRoleOutput() ProjectRoleOutput {
	return i.ToProjectRoleOutputWithContext(context.Background())
}

func (i *ProjectRole) ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleOutput)
}

// ProjectRoleArrayInput is an input type that accepts ProjectRoleArray and ProjectRoleArrayOutput values.
// You can construct a concrete instance of `ProjectRoleArrayInput` via:
//
//	ProjectRoleArray{ ProjectRoleArgs{...} }
type ProjectRoleArrayInput interface {
	pulumi.Input

	ToProjectRoleArrayOutput() ProjectRoleArrayOutput
	ToProjectRoleArrayOutputWithContext(context.Context) ProjectRoleArrayOutput
}

type ProjectRoleArray []ProjectRoleInput

func (ProjectRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRole)(nil)).Elem()
}

func (i ProjectRoleArray) ToProjectRoleArrayOutput() ProjectRoleArrayOutput {
	return i.ToProjectRoleArrayOutputWithContext(context.Background())
}

func (i ProjectRoleArray) ToProjectRoleArrayOutputWithContext(ctx context.Context) ProjectRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleArrayOutput)
}

// ProjectRoleMapInput is an input type that accepts ProjectRoleMap and ProjectRoleMapOutput values.
// You can construct a concrete instance of `ProjectRoleMapInput` via:
//
//	ProjectRoleMap{ "key": ProjectRoleArgs{...} }
type ProjectRoleMapInput interface {
	pulumi.Input

	ToProjectRoleMapOutput() ProjectRoleMapOutput
	ToProjectRoleMapOutputWithContext(context.Context) ProjectRoleMapOutput
}

type ProjectRoleMap map[string]ProjectRoleInput

func (ProjectRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRole)(nil)).Elem()
}

func (i ProjectRoleMap) ToProjectRoleMapOutput() ProjectRoleMapOutput {
	return i.ToProjectRoleMapOutputWithContext(context.Background())
}

func (i ProjectRoleMap) ToProjectRoleMapOutputWithContext(ctx context.Context) ProjectRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleMapOutput)
}

type ProjectRoleOutput struct{ *pulumi.OutputState }

func (ProjectRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRole)(nil)).Elem()
}

func (o ProjectRoleOutput) ToProjectRoleOutput() ProjectRoleOutput {
	return o
}

func (o ProjectRoleOutput) ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput {
	return o
}

// The role's unique identifier
func (o ProjectRoleOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Whether or not the role is custom (as opposed to Doppler built-in)
func (o ProjectRoleOutput) IsCustomRole() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.BoolOutput { return v.IsCustomRole }).(pulumi.BoolOutput)
}

// The name of the Doppler project role
func (o ProjectRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
func (o ProjectRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

type ProjectRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRole)(nil)).Elem()
}

func (o ProjectRoleArrayOutput) ToProjectRoleArrayOutput() ProjectRoleArrayOutput {
	return o
}

func (o ProjectRoleArrayOutput) ToProjectRoleArrayOutputWithContext(ctx context.Context) ProjectRoleArrayOutput {
	return o
}

func (o ProjectRoleArrayOutput) Index(i pulumi.IntInput) ProjectRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRole {
		return vs[0].([]*ProjectRole)[vs[1].(int)]
	}).(ProjectRoleOutput)
}

type ProjectRoleMapOutput struct{ *pulumi.OutputState }

func (ProjectRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRole)(nil)).Elem()
}

func (o ProjectRoleMapOutput) ToProjectRoleMapOutput() ProjectRoleMapOutput {
	return o
}

func (o ProjectRoleMapOutput) ToProjectRoleMapOutputWithContext(ctx context.Context) ProjectRoleMapOutput {
	return o
}

func (o ProjectRoleMapOutput) MapIndex(k pulumi.StringInput) ProjectRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRole {
		return vs[0].(map[string]*ProjectRole)[vs[1].(string)]
	}).(ProjectRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleInput)(nil)).Elem(), &ProjectRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleArrayInput)(nil)).Elem(), ProjectRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleMapInput)(nil)).Elem(), ProjectRoleMap{})
	pulumi.RegisterOutputType(ProjectRoleOutput{})
	pulumi.RegisterOutputType(ProjectRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectRoleMapOutput{})
}
