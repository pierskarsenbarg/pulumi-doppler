// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a Doppler config.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as doppler from "@pulumiverse/doppler";
 *
 * const backendCiGithub = new doppler.BranchConfig("backend_ci_github", {
 *     project: "backend",
 *     environment: "ci",
 *     name: "ci_github",
 * });
 * ```
 */
export class BranchConfig extends pulumi.CustomResource {
    /**
     * Get an existing BranchConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchConfigState, opts?: pulumi.CustomResourceOptions): BranchConfig {
        return new BranchConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:index/branchConfig:BranchConfig';

    /**
     * Returns true if the given object is an instance of BranchConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BranchConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BranchConfig.__pulumiType;
    }

    /**
     * The name of the Doppler environment where the config is located
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The name of the Doppler config
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Doppler project where the config is located
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a BranchConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchConfigArgs | BranchConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchConfigState | undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as BranchConfigArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "doppler:index/config:Config" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BranchConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BranchConfig resources.
 */
export interface BranchConfigState {
    /**
     * The name of the Doppler environment where the config is located
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the Doppler config
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Doppler project where the config is located
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BranchConfig resource.
 */
export interface BranchConfigArgs {
    /**
     * The name of the Doppler environment where the config is located
     */
    environment: pulumi.Input<string>;
    /**
     * The name of the Doppler config
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Doppler project where the config is located
     */
    project: pulumi.Input<string>;
}
