// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a Doppler service account token.
 */
export class ServiceAccountToken extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccountToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountTokenState, opts?: pulumi.CustomResourceOptions): ServiceAccountToken {
        return new ServiceAccountToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:index/serviceAccountToken:ServiceAccountToken';

    /**
     * Returns true if the given object is an instance of ServiceAccountToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccountToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccountToken.__pulumiType;
    }

    /**
     * The api key used to authenticate the service account
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * The datetime that the token was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
     */
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    /**
     * The display name of the API token
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Slug of the service account
     */
    public readonly serviceAccountSlug!: pulumi.Output<string>;
    /**
     * Slug of the service account token
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;

    /**
     * Create a ServiceAccountToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountTokenArgs | ServiceAccountTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountTokenState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceAccountSlug"] = state ? state.serviceAccountSlug : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as ServiceAccountTokenArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.serviceAccountSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountSlug'");
            }
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceAccountSlug"] = args ? args.serviceAccountSlug : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceAccountToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccountToken resources.
 */
export interface ServiceAccountTokenState {
    /**
     * The api key used to authenticate the service account
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The datetime that the token was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The display name of the API token
     */
    name?: pulumi.Input<string>;
    /**
     * Slug of the service account
     */
    serviceAccountSlug?: pulumi.Input<string>;
    /**
     * Slug of the service account token
     */
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAccountToken resource.
 */
export interface ServiceAccountTokenArgs {
    /**
     * The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The display name of the API token
     */
    name: pulumi.Input<string>;
    /**
     * Slug of the service account
     */
    serviceAccountSlug: pulumi.Input<string>;
}
