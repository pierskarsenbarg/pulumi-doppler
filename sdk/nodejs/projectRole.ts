// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a Doppler project_role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as doppler from "@pulumiverse/doppler";
 *
 * const logViewer = new doppler.ProjectRole("log_viewer", {
 *     name: "Log Viewer",
 *     permissions: ["enclave_config_logs"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import doppler:index/projectRole:ProjectRole default <project-role-identifier>
 * ```
 */
export class ProjectRole extends pulumi.CustomResource {
    /**
     * Get an existing ProjectRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectRoleState, opts?: pulumi.CustomResourceOptions): ProjectRole {
        return new ProjectRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:index/projectRole:ProjectRole';

    /**
     * Returns true if the given object is an instance of ProjectRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectRole.__pulumiType;
    }

    /**
     * The role's unique identifier
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * Whether or not the role is custom (as opposed to Doppler built-in)
     */
    public /*out*/ readonly isCustomRole!: pulumi.Output<boolean>;
    /**
     * The name of the Doppler project role
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
     */
    public readonly permissions!: pulumi.Output<string[]>;

    /**
     * Create a ProjectRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectRoleArgs | ProjectRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectRoleState | undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["isCustomRole"] = state ? state.isCustomRole : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as ProjectRoleArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["isCustomRole"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectRole resources.
 */
export interface ProjectRoleState {
    /**
     * The role's unique identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * Whether or not the role is custom (as opposed to Doppler built-in)
     */
    isCustomRole?: pulumi.Input<boolean>;
    /**
     * The name of the Doppler project role
     */
    name?: pulumi.Input<string>;
    /**
     * A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ProjectRole resource.
 */
export interface ProjectRoleArgs {
    /**
     * The name of the Doppler project role
     */
    name: pulumi.Input<string>;
    /**
     * A list of [Doppler project permissions](https://docs.doppler.com/reference/project_roles-create)
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
