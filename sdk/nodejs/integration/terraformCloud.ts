// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class TerraformCloud extends pulumi.CustomResource {
    /**
     * Get an existing TerraformCloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TerraformCloudState, opts?: pulumi.CustomResourceOptions): TerraformCloud {
        return new TerraformCloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:integration/terraformCloud:TerraformCloud';

    /**
     * Returns true if the given object is an instance of TerraformCloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TerraformCloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformCloud.__pulumiType;
    }

    /**
     * A Terraform Cloud API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * The name of the integration
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a TerraformCloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TerraformCloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TerraformCloudArgs | TerraformCloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TerraformCloudState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as TerraformCloudArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TerraformCloud.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TerraformCloud resources.
 */
export interface TerraformCloudState {
    /**
     * A Terraform Cloud API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The name of the integration
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TerraformCloud resource.
 */
export interface TerraformCloudArgs {
    /**
     * A Terraform Cloud API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * The name of the integration
     */
    name: pulumi.Input<string>;
}
