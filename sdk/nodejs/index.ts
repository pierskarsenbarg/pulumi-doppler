// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./config";
export * from "./environment";
export * from "./project";
export * from "./provider";
export * from "./secret";
export * from "./secrets";
export * from "./serviceToken";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { Config } from "./config";
import { Environment } from "./environment";
import { Project } from "./project";
import { Secret } from "./secret";
import { ServiceToken } from "./serviceToken";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "doppler:index/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "doppler:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "doppler:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "doppler:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "doppler:index/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("doppler", "index/config", _module)
pulumi.runtime.registerResourceModule("doppler", "index/environment", _module)
pulumi.runtime.registerResourceModule("doppler", "index/project", _module)
pulumi.runtime.registerResourceModule("doppler", "index/secret", _module)
pulumi.runtime.registerResourceModule("doppler", "index/serviceToken", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("doppler", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:doppler") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
