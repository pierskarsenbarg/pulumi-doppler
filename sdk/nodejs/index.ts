// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BranchConfigArgs, BranchConfigState } from "./branchConfig";
export type BranchConfig = import("./branchConfig").BranchConfig;
export const BranchConfig: typeof import("./branchConfig").BranchConfig = null as any;
utilities.lazyLoad(exports, ["BranchConfig"], () => require("./branchConfig"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { ServiceTokenArgs, ServiceTokenState } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));


// Export sub-modules:
import * as config from "./config";
import * as integration from "./integration";
import * as secretssync from "./secretssync";

export {
    config,
    integration,
    secretssync,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "doppler:index/branchConfig:BranchConfig":
                return new BranchConfig(name, <any>undefined, { urn })
            case "doppler:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "doppler:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "doppler:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "doppler:index/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("doppler", "index/branchConfig", _module)
pulumi.runtime.registerResourceModule("doppler", "index/environment", _module)
pulumi.runtime.registerResourceModule("doppler", "index/project", _module)
pulumi.runtime.registerResourceModule("doppler", "index/secret", _module)
pulumi.runtime.registerResourceModule("doppler", "index/serviceToken", _module)
pulumi.runtime.registerResourcePackage("doppler", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:doppler") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
