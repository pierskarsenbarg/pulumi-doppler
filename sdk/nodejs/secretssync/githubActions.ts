// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage a GitHub Actions Doppler sync.
 */
export class GithubActions extends pulumi.CustomResource {
    /**
     * Get an existing GithubActions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GithubActionsState, opts?: pulumi.CustomResourceOptions): GithubActions {
        return new GithubActions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:secretsSync/githubActions:GithubActions';

    /**
     * Returns true if the given object is an instance of GithubActions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GithubActions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GithubActions.__pulumiType;
    }

    /**
     * The name of the Doppler config
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    public readonly deleteBehavior!: pulumi.Output<string | undefined>;
    /**
     * The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
     */
    public readonly environmentName!: pulumi.Output<string | undefined>;
    /**
     * The slug of the integration to use for this sync
     */
    public readonly integration!: pulumi.Output<string>;
    /**
     * Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
     */
    public readonly orgScope!: pulumi.Output<string | undefined>;
    /**
     * The name of the Doppler project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
     */
    public readonly repoName!: pulumi.Output<string | undefined>;
    /**
     * Either "repo" or "org", based on the resource type to sync to
     */
    public readonly syncTarget!: pulumi.Output<string>;

    /**
     * Create a GithubActions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GithubActionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GithubActionsArgs | GithubActionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GithubActionsState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["deleteBehavior"] = state ? state.deleteBehavior : undefined;
            resourceInputs["environmentName"] = state ? state.environmentName : undefined;
            resourceInputs["integration"] = state ? state.integration : undefined;
            resourceInputs["orgScope"] = state ? state.orgScope : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["syncTarget"] = state ? state.syncTarget : undefined;
        } else {
            const args = argsOrState as GithubActionsArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.integration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integration'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.syncTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncTarget'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["deleteBehavior"] = args ? args.deleteBehavior : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["integration"] = args ? args.integration : undefined;
            resourceInputs["orgScope"] = args ? args.orgScope : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["syncTarget"] = args ? args.syncTarget : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GithubActions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GithubActions resources.
 */
export interface GithubActionsState {
    /**
     * The name of the Doppler config
     */
    config?: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
     */
    environmentName?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration?: pulumi.Input<string>;
    /**
     * Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
     */
    orgScope?: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project?: pulumi.Input<string>;
    /**
     * The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
     */
    repoName?: pulumi.Input<string>;
    /**
     * Either "repo" or "org", based on the resource type to sync to
     */
    syncTarget?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GithubActions resource.
 */
export interface GithubActionsArgs {
    /**
     * The name of the Doppler config
     */
    config: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The GitHub repo environment name to sync to (only used when `syncTarget` is set to "repo")
     */
    environmentName?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration: pulumi.Input<string>;
    /**
     * Either "all" or "private", based on the which repos you want to have access (only used when `syncTarget` is set to "org")
     */
    orgScope?: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project: pulumi.Input<string>;
    /**
     * The GitHub repo name to sync to (only used when `syncTarget` is set to "repo")
     */
    repoName?: pulumi.Input<string>;
    /**
     * Either "repo" or "org", based on the resource type to sync to
     */
    syncTarget: pulumi.Input<string>;
}
