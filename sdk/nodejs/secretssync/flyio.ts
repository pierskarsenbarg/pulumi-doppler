// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage a Fly.io Doppler sync.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as doppler from "@pulumiverse/doppler";
 *
 * const prod = new doppler.integration.Flyio("prod", {
 *     name: "TF Fly.io",
 *     apiKey: "fo1_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
 * });
 * const backendProd = new doppler.secretssync.Flyio("backend_prod", {
 *     integration: prod.id,
 *     project: "backend",
 *     config: "prd",
 *     appId: "my-app",
 *     restartMachines: true,
 *     deleteBehavior: "leave_in_target",
 * });
 * ```
 */
export class Flyio extends pulumi.CustomResource {
    /**
     * Get an existing Flyio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlyioState, opts?: pulumi.CustomResourceOptions): Flyio {
        return new Flyio(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:secretsSync/flyio:Flyio';

    /**
     * Returns true if the given object is an instance of Flyio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flyio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flyio.__pulumiType;
    }

    /**
     * The app ID
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The name of the Doppler config
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    public readonly deleteBehavior!: pulumi.Output<string | undefined>;
    /**
     * The slug of the integration to use for this sync
     */
    public readonly integration!: pulumi.Output<string>;
    /**
     * The name of the Doppler project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Whether or not to restart the Fly.io machines when secrets are updated
     */
    public readonly restartMachines!: pulumi.Output<boolean>;

    /**
     * Create a Flyio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlyioArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlyioArgs | FlyioState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlyioState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["deleteBehavior"] = state ? state.deleteBehavior : undefined;
            resourceInputs["integration"] = state ? state.integration : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["restartMachines"] = state ? state.restartMachines : undefined;
        } else {
            const args = argsOrState as FlyioArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.integration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integration'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.restartMachines === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restartMachines'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["deleteBehavior"] = args ? args.deleteBehavior : undefined;
            resourceInputs["integration"] = args ? args.integration : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["restartMachines"] = args ? args.restartMachines : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flyio.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Flyio resources.
 */
export interface FlyioState {
    /**
     * The app ID
     */
    appId?: pulumi.Input<string>;
    /**
     * The name of the Doppler config
     */
    config?: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration?: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project?: pulumi.Input<string>;
    /**
     * Whether or not to restart the Fly.io machines when secrets are updated
     */
    restartMachines?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Flyio resource.
 */
export interface FlyioArgs {
    /**
     * The app ID
     */
    appId: pulumi.Input<string>;
    /**
     * The name of the Doppler config
     */
    config: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project: pulumi.Input<string>;
    /**
     * Whether or not to restart the Fly.io machines when secrets are updated
     */
    restartMachines: pulumi.Input<boolean>;
}
