// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage an AWS Secrets Manager Doppler sync.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as doppler from "@pulumiverse/doppler";
 *
 * const dopplerSecretsManager = new aws.iam.Role("doppler_secrets_manager", {
 *     name: "doppler_secrets_manager",
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: "sts:AssumeRole",
 *             Principal: {
 *                 AWS: "arn:aws:iam::299900769157:user/doppler-integration-operator",
 *             },
 *             Condition: {
 *                 StringEquals: {
 *                     "sts:ExternalId": "<YOUR_WORKPLACE_SLUG>",
 *                 },
 *             },
 *         }],
 *     }),
 *     inlinePolicies: [{
 *         name: "doppler_secret_manager",
 *         policy: JSON.stringify({
 *             Version: "2012-10-17",
 *             Statement: [{
 *                 Action: [
 *                     "secretsmanager:GetSecretValue",
 *                     "secretsmanager:DescribeSecret",
 *                     "secretsmanager:PutSecretValue",
 *                     "secretsmanager:CreateSecret",
 *                     "secretsmanager:DeleteSecret",
 *                     "secretsmanager:TagResource",
 *                     "secretsmanager:UpdateSecret",
 *                 ],
 *                 Effect: "Allow",
 *                 Resource: "*",
 *             }],
 *         }),
 *     }],
 * });
 * const prod = new doppler.integration.AwsSecretsManager("prod", {
 *     name: "Production",
 *     assumeRoleArn: dopplerSecretsManager.arn,
 * });
 * const backendProd = new doppler.secretssync.AwsSecretsManager("backend_prod", {
 *     integration: prod.id,
 *     project: "backend",
 *     config: "prd",
 *     region: "us-east-1",
 *     path: "/backend/",
 *     tags: {
 *         myTag: "enabled",
 *     },
 * });
 * ```
 */
export class AwsSecretsManager extends pulumi.CustomResource {
    /**
     * Get an existing AwsSecretsManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsSecretsManagerState, opts?: pulumi.CustomResourceOptions): AwsSecretsManager {
        return new AwsSecretsManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:secretsSync/awsSecretsManager:AwsSecretsManager';

    /**
     * Returns true if the given object is an instance of AwsSecretsManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsSecretsManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsSecretsManager.__pulumiType;
    }

    /**
     * The name of the Doppler config
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * The slug of the integration to use for this sync
     */
    public readonly integration!: pulumi.Output<string>;
    /**
     * The path to the secret in AWS
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The name of the Doppler project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The AWS region
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * AWS tags to attach to the secrets
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a AwsSecretsManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsSecretsManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsSecretsManagerArgs | AwsSecretsManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsSecretsManagerState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["integration"] = state ? state.integration : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AwsSecretsManagerArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.integration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integration'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["integration"] = args ? args.integration : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsSecretsManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsSecretsManager resources.
 */
export interface AwsSecretsManagerState {
    /**
     * The name of the Doppler config
     */
    config?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration?: pulumi.Input<string>;
    /**
     * The path to the secret in AWS
     */
    path?: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project?: pulumi.Input<string>;
    /**
     * The AWS region
     */
    region?: pulumi.Input<string>;
    /**
     * AWS tags to attach to the secrets
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AwsSecretsManager resource.
 */
export interface AwsSecretsManagerArgs {
    /**
     * The name of the Doppler config
     */
    config: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration: pulumi.Input<string>;
    /**
     * The path to the secret in AWS
     */
    path: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project: pulumi.Input<string>;
    /**
     * The AWS region
     */
    region: pulumi.Input<string>;
    /**
     * AWS tags to attach to the secrets
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
