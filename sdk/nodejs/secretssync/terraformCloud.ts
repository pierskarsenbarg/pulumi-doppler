// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class TerraformCloud extends pulumi.CustomResource {
    /**
     * Get an existing TerraformCloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TerraformCloudState, opts?: pulumi.CustomResourceOptions): TerraformCloud {
        return new TerraformCloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:secretsSync/terraformCloud:TerraformCloud';

    /**
     * Returns true if the given object is an instance of TerraformCloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TerraformCloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformCloud.__pulumiType;
    }

    /**
     * The name of the Doppler config
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    public readonly deleteBehavior!: pulumi.Output<string | undefined>;
    /**
     * The slug of the integration to use for this sync
     */
    public readonly integration!: pulumi.Output<string>;
    /**
     * A name transform to apply before syncing secrets: "none" or "lowercase"
     */
    public readonly nameTransform!: pulumi.Output<string>;
    /**
     * The name of the Doppler project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Either "workspace" or "variableSet", based on the resource type to sync to
     */
    public readonly syncTarget!: pulumi.Output<string>;
    public readonly variableSetId!: pulumi.Output<string | undefined>;
    public readonly variableSyncType!: pulumi.Output<string>;
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a TerraformCloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TerraformCloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TerraformCloudArgs | TerraformCloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TerraformCloudState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["deleteBehavior"] = state ? state.deleteBehavior : undefined;
            resourceInputs["integration"] = state ? state.integration : undefined;
            resourceInputs["nameTransform"] = state ? state.nameTransform : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["syncTarget"] = state ? state.syncTarget : undefined;
            resourceInputs["variableSetId"] = state ? state.variableSetId : undefined;
            resourceInputs["variableSyncType"] = state ? state.variableSyncType : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as TerraformCloudArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.integration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integration'");
            }
            if ((!args || args.nameTransform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameTransform'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.syncTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncTarget'");
            }
            if ((!args || args.variableSyncType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variableSyncType'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["deleteBehavior"] = args ? args.deleteBehavior : undefined;
            resourceInputs["integration"] = args ? args.integration : undefined;
            resourceInputs["nameTransform"] = args ? args.nameTransform : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["syncTarget"] = args ? args.syncTarget : undefined;
            resourceInputs["variableSetId"] = args ? args.variableSetId : undefined;
            resourceInputs["variableSyncType"] = args ? args.variableSyncType : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TerraformCloud.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TerraformCloud resources.
 */
export interface TerraformCloudState {
    /**
     * The name of the Doppler config
     */
    config?: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration?: pulumi.Input<string>;
    /**
     * A name transform to apply before syncing secrets: "none" or "lowercase"
     */
    nameTransform?: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project?: pulumi.Input<string>;
    /**
     * Either "workspace" or "variableSet", based on the resource type to sync to
     */
    syncTarget?: pulumi.Input<string>;
    variableSetId?: pulumi.Input<string>;
    variableSyncType?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TerraformCloud resource.
 */
export interface TerraformCloudArgs {
    /**
     * The name of the Doppler config
     */
    config: pulumi.Input<string>;
    /**
     * The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leaveInTarget` (default) or `deleteFromTarget`.
     */
    deleteBehavior?: pulumi.Input<string>;
    /**
     * The slug of the integration to use for this sync
     */
    integration: pulumi.Input<string>;
    /**
     * A name transform to apply before syncing secrets: "none" or "lowercase"
     */
    nameTransform: pulumi.Input<string>;
    /**
     * The name of the Doppler project
     */
    project: pulumi.Input<string>;
    /**
     * Either "workspace" or "variableSet", based on the resource type to sync to
     */
    syncTarget: pulumi.Input<string>;
    variableSetId?: pulumi.Input<string>;
    variableSyncType: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}
